"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_lib_mock-passkey-kit_ts",{

/***/ "(app-pages-browser)/./lib/mock-passkey-kit.ts":
/*!*********************************!*\
  !*** ./lib/mock-passkey-kit.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PasskeyKit: function() { return /* binding */ PasskeyKit; }\n/* harmony export */ });\n// Mock Passkey-Kit implementation for Phase 1\n// In Phase 2, this will be replaced with the real passkey-kit package\nclass PasskeyKit {\n    async connectWallet(options) {\n        // Simulate passkey authentication delay\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        // Generate mock wallet address\n        this.address = \"G\".concat(Math.random().toString(36).substring(2, 15).toUpperCase());\n        this.contractId = \"C\".concat(Math.random().toString(36).substring(2, 15).toUpperCase());\n        console.log(\"\\uD83D\\uDD10 Mock Passkey authentication for: \".concat(options.name));\n        console.log(\"\\uD83D\\uDCCD Wallet Address: \".concat(this.address));\n        console.log(\"\\uD83D\\uDCC4 Contract ID: \".concat(this.contractId));\n        return this.contractId;\n    }\n    async createWallet(options) {\n        // Simulate wallet creation delay\n        await new Promise((resolve)=>setTimeout(resolve, 1500));\n        // Generate mock wallet address\n        this.address = \"G\".concat(Math.random().toString(36).substring(2, 15).toUpperCase());\n        this.contractId = \"C\".concat(Math.random().toString(36).substring(2, 15).toUpperCase());\n        console.log(\"\\uD83C\\uDD95 Mock wallet created for: \".concat(options.name));\n        console.log(\"\\uD83D\\uDCCD Wallet Address: \".concat(this.address));\n        console.log(\"\\uD83D\\uDCC4 Contract ID: \".concat(this.contractId));\n        return this.contractId;\n    }\n    getAddress() {\n        if (!this.address) {\n            throw new Error(\"Wallet not connected\");\n        }\n        return this.address;\n    }\n    getContractId() {\n        if (!this.contractId) {\n            throw new Error(\"Wallet not connected\");\n        }\n        return this.contractId;\n    }\n    async buildTransaction(params) {\n        // Mock transaction building\n        console.log(\"\\uD83D\\uDD28 Building mock transaction:\", params);\n        return {\n            id: \"tx_\".concat(Math.random().toString(36).substring(2, 15)),\n            ...params\n        };\n    }\n    async signTransaction(tx) {\n        // Simulate passkey signing delay\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n        console.log(\"✍️ Mock passkey signature applied\");\n        return {\n            ...tx,\n            signature: \"sig_\".concat(Math.random().toString(36).substring(2, 15))\n        };\n    }\n    async submitTransaction(signedTx) {\n        // Simulate blockchain submission delay\n        await new Promise((resolve)=>setTimeout(resolve, 2000));\n        console.log(\"\\uD83D\\uDCE4 Mock transaction submitted to blockchain\");\n        return {\n            hash: \"hash_\".concat(Math.random().toString(36).substring(2, 15)),\n            status: \"success\",\n            ledger: Math.floor(Math.random() * 1000000) + 1000000\n        };\n    }\n    disconnect() {\n        console.log(\"\\uD83D\\uDD0C Mock passkey wallet disconnected\");\n        // Reset the wallet state\n        this.walletAddress = null;\n        this.contractId = null;\n    }\n    constructor(config){\n        this.address = null;\n        this.contractId = null;\n        this.config = config;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9tb2NrLXBhc3NrZXkta2l0LnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw4Q0FBOEM7QUFDOUMsc0VBQXNFO0FBYS9ELE1BQU1BO0lBU1gsTUFBTUMsY0FBY0MsT0FBc0IsRUFBbUI7UUFDM0Qsd0NBQXdDO1FBQ3hDLE1BQU0sSUFBSUMsUUFBUUMsQ0FBQUEsVUFBV0MsV0FBV0QsU0FBUztRQUVqRCwrQkFBK0I7UUFDL0IsSUFBSSxDQUFDRSxPQUFPLEdBQUcsSUFBOEQsT0FBMURDLEtBQUtDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLElBQUlDLFNBQVMsQ0FBQyxHQUFHLElBQUlDLFdBQVc7UUFDMUUsSUFBSSxDQUFDQyxVQUFVLEdBQUcsSUFBOEQsT0FBMURMLEtBQUtDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLElBQUlDLFNBQVMsQ0FBQyxHQUFHLElBQUlDLFdBQVc7UUFFN0VFLFFBQVFDLEdBQUcsQ0FBQyxpREFBb0QsT0FBYlosUUFBUWEsSUFBSTtRQUMvREYsUUFBUUMsR0FBRyxDQUFDLGdDQUFtQyxPQUFiLElBQUksQ0FBQ1IsT0FBTztRQUM5Q08sUUFBUUMsR0FBRyxDQUFDLDZCQUFtQyxPQUFoQixJQUFJLENBQUNGLFVBQVU7UUFFOUMsT0FBTyxJQUFJLENBQUNBLFVBQVU7SUFDeEI7SUFFQSxNQUFNSSxhQUFhZCxPQUFzQixFQUFtQjtRQUMxRCxpQ0FBaUM7UUFDakMsTUFBTSxJQUFJQyxRQUFRQyxDQUFBQSxVQUFXQyxXQUFXRCxTQUFTO1FBRWpELCtCQUErQjtRQUMvQixJQUFJLENBQUNFLE9BQU8sR0FBRyxJQUE4RCxPQUExREMsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsU0FBUyxDQUFDLEdBQUcsSUFBSUMsV0FBVztRQUMxRSxJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUE4RCxPQUExREwsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsU0FBUyxDQUFDLEdBQUcsSUFBSUMsV0FBVztRQUU3RUUsUUFBUUMsR0FBRyxDQUFDLHlDQUE0QyxPQUFiWixRQUFRYSxJQUFJO1FBQ3ZERixRQUFRQyxHQUFHLENBQUMsZ0NBQW1DLE9BQWIsSUFBSSxDQUFDUixPQUFPO1FBQzlDTyxRQUFRQyxHQUFHLENBQUMsNkJBQW1DLE9BQWhCLElBQUksQ0FBQ0YsVUFBVTtRQUU5QyxPQUFPLElBQUksQ0FBQ0EsVUFBVTtJQUN4QjtJQUVBSyxhQUFxQjtRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDWCxPQUFPLEVBQUU7WUFDakIsTUFBTSxJQUFJWSxNQUFNO1FBQ2xCO1FBQ0EsT0FBTyxJQUFJLENBQUNaLE9BQU87SUFDckI7SUFFQWEsZ0JBQXdCO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUNQLFVBQVUsRUFBRTtZQUNwQixNQUFNLElBQUlNLE1BQU07UUFDbEI7UUFDQSxPQUFPLElBQUksQ0FBQ04sVUFBVTtJQUN4QjtJQUVBLE1BQU1RLGlCQUFpQkMsTUFBVyxFQUFnQjtRQUNoRCw0QkFBNEI7UUFDNUJSLFFBQVFDLEdBQUcsQ0FBQywyQ0FBaUNPO1FBQzdDLE9BQU87WUFDTEMsSUFBSSxNQUFrRCxPQUE1Q2YsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsU0FBUyxDQUFDLEdBQUc7WUFDbEQsR0FBR1csTUFBTTtRQUNYO0lBQ0Y7SUFFQSxNQUFNRSxnQkFBZ0JDLEVBQU8sRUFBZ0I7UUFDM0MsaUNBQWlDO1FBQ2pDLE1BQU0sSUFBSXJCLFFBQVFDLENBQUFBLFVBQVdDLFdBQVdELFNBQVM7UUFFakRTLFFBQVFDLEdBQUcsQ0FBQztRQUNaLE9BQU87WUFDTCxHQUFHVSxFQUFFO1lBQ0xDLFdBQVcsT0FBbUQsT0FBNUNsQixLQUFLQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQyxJQUFJQyxTQUFTLENBQUMsR0FBRztRQUM1RDtJQUNGO0lBRUEsTUFBTWdCLGtCQUFrQkMsUUFBYSxFQUFnQjtRQUNuRCx1Q0FBdUM7UUFDdkMsTUFBTSxJQUFJeEIsUUFBUUMsQ0FBQUEsVUFBV0MsV0FBV0QsU0FBUztRQUVqRFMsUUFBUUMsR0FBRyxDQUFDO1FBQ1osT0FBTztZQUNMYyxNQUFNLFFBQW9ELE9BQTVDckIsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsU0FBUyxDQUFDLEdBQUc7WUFDdERtQixRQUFRO1lBQ1JDLFFBQVF2QixLQUFLd0IsS0FBSyxDQUFDeEIsS0FBS0MsTUFBTSxLQUFLLFdBQVc7UUFDaEQ7SUFDRjtJQUVBd0IsYUFBbUI7UUFDakJuQixRQUFRQyxHQUFHLENBQUM7UUFDWix5QkFBeUI7UUFDekIsSUFBSSxDQUFDbUIsYUFBYSxHQUFHO1FBQ3JCLElBQUksQ0FBQ3JCLFVBQVUsR0FBRztJQUNwQjtJQXJGQXNCLFlBQVlDLE1BQXdCLENBQUU7YUFIOUI3QixVQUF5QjthQUN6Qk0sYUFBNEI7UUFHbEMsSUFBSSxDQUFDdUIsTUFBTSxHQUFHQTtJQUNoQjtBQW9GRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvbW9jay1wYXNza2V5LWtpdC50cz82MTgzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE1vY2sgUGFzc2tleS1LaXQgaW1wbGVtZW50YXRpb24gZm9yIFBoYXNlIDFcbi8vIEluIFBoYXNlIDIsIHRoaXMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoZSByZWFsIHBhc3NrZXkta2l0IHBhY2thZ2VcblxuZXhwb3J0IGludGVyZmFjZSBQYXNza2V5S2l0Q29uZmlnIHtcbiAgcnBjVXJsOiBzdHJpbmdcbiAgbmV0d29ya1Bhc3NwaHJhc2U6IHN0cmluZ1xuICBmYWN0b3J5Q29udHJhY3RJZDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2FsbGV0T3B0aW9ucyB7XG4gIG5hbWU6IHN0cmluZ1xuICBkZXNjcmlwdGlvbjogc3RyaW5nXG59XG5cbmV4cG9ydCBjbGFzcyBQYXNza2V5S2l0IHtcbiAgcHJpdmF0ZSBjb25maWc6IFBhc3NrZXlLaXRDb25maWdcbiAgcHJpdmF0ZSBhZGRyZXNzOiBzdHJpbmcgfCBudWxsID0gbnVsbFxuICBwcml2YXRlIGNvbnRyYWN0SWQ6IHN0cmluZyB8IG51bGwgPSBudWxsXG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBQYXNza2V5S2l0Q29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWdcbiAgfVxuXG4gIGFzeW5jIGNvbm5lY3RXYWxsZXQob3B0aW9uczogV2FsbGV0T3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgLy8gU2ltdWxhdGUgcGFzc2tleSBhdXRoZW50aWNhdGlvbiBkZWxheVxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSlcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBtb2NrIHdhbGxldCBhZGRyZXNzXG4gICAgdGhpcy5hZGRyZXNzID0gYEcke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxNSkudG9VcHBlckNhc2UoKX1gXG4gICAgdGhpcy5jb250cmFjdElkID0gYEMke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxNSkudG9VcHBlckNhc2UoKX1gXG4gICAgXG4gICAgY29uc29sZS5sb2coYPCflJAgTW9jayBQYXNza2V5IGF1dGhlbnRpY2F0aW9uIGZvcjogJHtvcHRpb25zLm5hbWV9YClcbiAgICBjb25zb2xlLmxvZyhg8J+TjSBXYWxsZXQgQWRkcmVzczogJHt0aGlzLmFkZHJlc3N9YClcbiAgICBjb25zb2xlLmxvZyhg8J+ThCBDb250cmFjdCBJRDogJHt0aGlzLmNvbnRyYWN0SWR9YClcbiAgICBcbiAgICByZXR1cm4gdGhpcy5jb250cmFjdElkXG4gIH1cblxuICBhc3luYyBjcmVhdGVXYWxsZXQob3B0aW9uczogV2FsbGV0T3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgLy8gU2ltdWxhdGUgd2FsbGV0IGNyZWF0aW9uIGRlbGF5XG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDE1MDApKVxuICAgIFxuICAgIC8vIEdlbmVyYXRlIG1vY2sgd2FsbGV0IGFkZHJlc3NcbiAgICB0aGlzLmFkZHJlc3MgPSBgRyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDE1KS50b1VwcGVyQ2FzZSgpfWBcbiAgICB0aGlzLmNvbnRyYWN0SWQgPSBgQyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDE1KS50b1VwcGVyQ2FzZSgpfWBcbiAgICBcbiAgICBjb25zb2xlLmxvZyhg8J+GlSBNb2NrIHdhbGxldCBjcmVhdGVkIGZvcjogJHtvcHRpb25zLm5hbWV9YClcbiAgICBjb25zb2xlLmxvZyhg8J+TjSBXYWxsZXQgQWRkcmVzczogJHt0aGlzLmFkZHJlc3N9YClcbiAgICBjb25zb2xlLmxvZyhg8J+ThCBDb250cmFjdCBJRDogJHt0aGlzLmNvbnRyYWN0SWR9YClcbiAgICBcbiAgICByZXR1cm4gdGhpcy5jb250cmFjdElkXG4gIH1cblxuICBnZXRBZGRyZXNzKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmFkZHJlc3MpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignV2FsbGV0IG5vdCBjb25uZWN0ZWQnKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hZGRyZXNzXG4gIH1cblxuICBnZXRDb250cmFjdElkKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmNvbnRyYWN0SWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignV2FsbGV0IG5vdCBjb25uZWN0ZWQnKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb250cmFjdElkXG4gIH1cblxuICBhc3luYyBidWlsZFRyYW5zYWN0aW9uKHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyBNb2NrIHRyYW5zYWN0aW9uIGJ1aWxkaW5nXG4gICAgY29uc29sZS5sb2coJ/CflKggQnVpbGRpbmcgbW9jayB0cmFuc2FjdGlvbjonLCBwYXJhbXMpXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBgdHhfJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTUpfWAsXG4gICAgICAuLi5wYXJhbXNcbiAgICB9XG4gIH1cblxuICBhc3luYyBzaWduVHJhbnNhY3Rpb24odHg6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gU2ltdWxhdGUgcGFzc2tleSBzaWduaW5nIGRlbGF5XG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwMCkpXG4gICAgXG4gICAgY29uc29sZS5sb2coJ+Kcje+4jyBNb2NrIHBhc3NrZXkgc2lnbmF0dXJlIGFwcGxpZWQnKVxuICAgIHJldHVybiB7XG4gICAgICAuLi50eCxcbiAgICAgIHNpZ25hdHVyZTogYHNpZ18ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxNSl9YFxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN1Ym1pdFRyYW5zYWN0aW9uKHNpZ25lZFR4OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIC8vIFNpbXVsYXRlIGJsb2NrY2hhaW4gc3VibWlzc2lvbiBkZWxheVxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMDAwKSlcbiAgICBcbiAgICBjb25zb2xlLmxvZygn8J+TpCBNb2NrIHRyYW5zYWN0aW9uIHN1Ym1pdHRlZCB0byBibG9ja2NoYWluJylcbiAgICByZXR1cm4ge1xuICAgICAgaGFzaDogYGhhc2hfJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTUpfWAsXG4gICAgICBzdGF0dXM6ICdzdWNjZXNzJyxcbiAgICAgIGxlZGdlcjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMCkgKyAxMDAwMDAwXG4gICAgfVxuICB9XG5cbiAgZGlzY29ubmVjdCgpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZygn8J+UjCBNb2NrIHBhc3NrZXkgd2FsbGV0IGRpc2Nvbm5lY3RlZCcpXG4gICAgLy8gUmVzZXQgdGhlIHdhbGxldCBzdGF0ZVxuICAgIHRoaXMud2FsbGV0QWRkcmVzcyA9IG51bGxcbiAgICB0aGlzLmNvbnRyYWN0SWQgPSBudWxsXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJQYXNza2V5S2l0IiwiY29ubmVjdFdhbGxldCIsIm9wdGlvbnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJhZGRyZXNzIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwidG9VcHBlckNhc2UiLCJjb250cmFjdElkIiwiY29uc29sZSIsImxvZyIsIm5hbWUiLCJjcmVhdGVXYWxsZXQiLCJnZXRBZGRyZXNzIiwiRXJyb3IiLCJnZXRDb250cmFjdElkIiwiYnVpbGRUcmFuc2FjdGlvbiIsInBhcmFtcyIsImlkIiwic2lnblRyYW5zYWN0aW9uIiwidHgiLCJzaWduYXR1cmUiLCJzdWJtaXRUcmFuc2FjdGlvbiIsInNpZ25lZFR4IiwiaGFzaCIsInN0YXR1cyIsImxlZGdlciIsImZsb29yIiwiZGlzY29ubmVjdCIsIndhbGxldEFkZHJlc3MiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/mock-passkey-kit.ts\n"));

/***/ })

});