"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_lib_x402-service_ts",{

/***/ "(app-pages-browser)/./lib/x402-service.ts":
/*!*****************************!*\
  !*** ./lib/x402-service.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   X402Service: function() { return /* binding */ X402Service; },\n/* harmony export */   createX402Service: function() { return /* binding */ createX402Service; }\n/* harmony export */ });\n/* harmony import */ var _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stellar/stellar-sdk */ \"(app-pages-browser)/./node_modules/@stellar/stellar-sdk/dist/stellar-sdk.min.js\");\n/* harmony import */ var _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__);\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\n\nclass X402Service {\n    /**\n   * Initiate X402 payment flow\n   */ async initiatePayment(params) {\n        try {\n            console.log(\"\\uD83D\\uDCB3 Initiating X402 payment:\", params);\n            // Step 1: Request payment requirements\n            const requirements = await this.getPaymentRequirements(params.resource);\n            if (!requirements) {\n                throw new Error(\"Payment requirements not available\");\n            }\n            // Step 2: Validate payment parameters\n            this.validatePaymentParams(params, requirements);\n            // Step 3: Create payment transaction\n            const paymentTx = await this.createPaymentTransaction(params, requirements);\n            // Step 4: Sign and submit transaction\n            const result = await this.submitPaymentTransaction(paymentTx, params.payer);\n            // Step 5: Create X-PAYMENT header\n            const paymentHeader = this.createPaymentHeader(result.txHash, requirements);\n            console.log(\"✅ X402 payment completed:\", result.txHash);\n            return {\n                success: true,\n                txHash: result.txHash,\n                paymentHeader\n            };\n        } catch (error) {\n            console.error(\"❌ X402 payment failed:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Payment failed\"\n            };\n        }\n    }\n    /**\n   * Get payment requirements from X402 facilitator\n   */ async getPaymentRequirements(resource) {\n        try {\n            console.log(\"\\uD83D\\uDD0D Requesting payment requirements for: \".concat(resource));\n            const response = await fetch(\"\".concat(this.config.facilitatorUrl, \"/payment-requirements\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    resource\n                })\n            });\n            if (!response.ok) {\n                if (response.status === 402) {\n                    // 402 Payment Required - extract requirements from headers\n                    const requirements = this.parsePaymentRequiredHeaders(response.headers);\n                    return requirements;\n                }\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            }\n            const data = await response.json();\n            return data.requirements;\n        } catch (error) {\n            console.error(\"Failed to get payment requirements:\", error);\n            return null;\n        }\n    }\n    /**\n   * Verify X402 payment\n   */ async verifyPayment(paymentHeader, requirements) {\n        try {\n            console.log(\"\\uD83D\\uDD10 Verifying X402 payment\");\n            const response = await fetch(\"\".concat(this.config.facilitatorUrl, \"/verify-payment\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"X-PAYMENT\": paymentHeader\n                },\n                body: JSON.stringify({\n                    requirements\n                })\n            });\n            return response.ok;\n        } catch (error) {\n            console.error(\"Payment verification failed:\", error);\n            return false;\n        }\n    }\n    /**\n   * Create USDC payment transaction\n   */ async createPaymentTransaction(params, requirements) {\n        var _params_payer, _params_payer1;\n        const networkPassphrase = this.config.network === \"mainnet\" ? _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.Networks.PUBLIC : _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.Networks.TESTNET;\n        // Create USDC asset\n        const usdcAsset = new _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.Asset(\"USDC\", requirements.recipient);\n        // Build payment operation\n        const paymentOp = _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.Operation.payment({\n            destination: requirements.recipient,\n            asset: usdcAsset,\n            amount: (requirements.amount / 1000000).toString(),\n            source: (_params_payer = params.payer) === null || _params_payer === void 0 ? void 0 : _params_payer.getAddress()\n        });\n        // Create transaction\n        const transaction = new TransactionBuilder(await this.getAccount((_params_payer1 = params.payer) === null || _params_payer1 === void 0 ? void 0 : _params_payer1.getAddress()), {\n            fee: _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.BASE_FEE,\n            networkPassphrase\n        }).addOperation(paymentOp).setTimeout(300).build();\n        return transaction;\n    }\n    /**\n   * Submit payment transaction\n   */ async submitPaymentTransaction(transaction, payer) {\n        if (!payer) {\n            throw new Error(\"Payer wallet required for transaction signing\");\n        }\n        // Sign transaction with payer's wallet\n        const signedTx = await payer.signTransaction(transaction);\n        // Submit to network\n        const result = await this.server.submitTransaction(signedTx);\n        if (result.successful) {\n            return {\n                txHash: result.hash\n            };\n        } else {\n            var _result_extras;\n            throw new Error(\"Transaction failed: \".concat((_result_extras = result.extras) === null || _result_extras === void 0 ? void 0 : _result_extras.result_codes));\n        }\n    }\n    /**\n   * Create X-PAYMENT header\n   */ createPaymentHeader(txHash, requirements) {\n        const paymentData = {\n            txHash,\n            amount: requirements.amount,\n            token: requirements.token,\n            network: requirements.network,\n            timestamp: Date.now()\n        };\n        // In a real implementation, this would be signed\n        return Buffer.from(JSON.stringify(paymentData)).toString(\"base64\");\n    }\n    /**\n   * Parse 402 Payment Required headers\n   */ parsePaymentRequiredHeaders(headers) {\n        const scheme = headers.get(\"X-PAYMENT-SCHEME\") || \"exact\";\n        const network = headers.get(\"X-PAYMENT-NETWORK\") || \"stellar\";\n        const token = headers.get(\"X-PAYMENT-TOKEN\") || \"USDC\";\n        const amount = parseInt(headers.get(\"X-PAYMENT-AMOUNT\") || \"0\");\n        const recipient = headers.get(\"X-PAYMENT-RECIPIENT\") || \"\";\n        const validUntil = parseInt(headers.get(\"X-PAYMENT-VALID-UNTIL\") || \"0\");\n        return {\n            scheme,\n            network,\n            token,\n            amount,\n            recipient,\n            validUntil\n        };\n    }\n    /**\n   * Validate payment parameters against requirements\n   */ validatePaymentParams(params, requirements) {\n        if (params.amount !== requirements.amount) {\n            throw new Error(\"Amount mismatch: expected \".concat(requirements.amount, \", got \").concat(params.amount));\n        }\n        if (params.token !== requirements.token) {\n            throw new Error(\"Token mismatch: expected \".concat(requirements.token, \", got \").concat(params.token));\n        }\n        if (params.recipient !== requirements.recipient) {\n            throw new Error(\"Recipient mismatch: expected \".concat(requirements.recipient, \", got \").concat(params.recipient));\n        }\n        if (Date.now() > requirements.validUntil) {\n            throw new Error(\"Payment requirements expired\");\n        }\n    }\n    /**\n   * Get account information\n   */ async getAccount(address) {\n        try {\n            return await this.server.loadAccount(address);\n        } catch (error) {\n            throw new Error(\"Failed to load account \".concat(address, \": \").concat(error));\n        }\n    }\n    /**\n   * Get USDC balance for an account\n   */ async getUSDCBalance(address) {\n        try {\n            const account = await this.server.loadAccount(address);\n            const usdcAsset = new _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.Asset(\"USDC\", this.config.usdcAssetId);\n            const balance = account.balances.find((b)=>b.asset_code === \"USDC\" && b.asset_issuer === this.config.usdcAssetId);\n            return balance ? parseFloat(balance.balance) * 1000000 : 0 // Convert to micro units\n            ;\n        } catch (error) {\n            console.error(\"Failed to get USDC balance:\", error);\n            return 0;\n        }\n    }\n    /**\n   * Check if account has sufficient USDC balance\n   */ async hasSufficientBalance(address, amount) {\n        const balance = await this.getUSDCBalance(address);\n        return balance >= amount;\n    }\n    constructor(config){\n        this.config = config;\n        this.server = new Server(config.horizonUrl);\n    }\n}\n// Helper function to create X402 service instance\nfunction createX402Service() {\n    const config = {\n        facilitatorUrl: \"http://localhost:8080\" || 0,\n        network: \"testnet\" || 0,\n        usdcAssetId: \"GBBD47IF6LXCC7EDU6X6LC4XES3D76GITB4Q5TNWFRJN54H6H6AUDH6A\" || 0,\n        horizonUrl: \"https://horizon-testnet.stellar.org\" || 0\n    };\n    return new X402Service(config);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/x402-service.ts\n"));

/***/ })

});