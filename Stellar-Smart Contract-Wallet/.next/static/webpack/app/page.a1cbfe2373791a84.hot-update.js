"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./contexts/PasskeyWalletContext.tsx":
/*!*******************************************!*\
  !*** ./contexts/PasskeyWalletContext.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PasskeyWalletProvider: function() { return /* binding */ PasskeyWalletProvider; },\n/* harmony export */   usePasskeyWallet: function() { return /* binding */ usePasskeyWallet; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _VLEIContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VLEIContext */ \"(app-pages-browser)/./contexts/VLEIContext.tsx\");\n/* harmony import */ var _lib_passkey_auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/passkey-auth */ \"(app-pages-browser)/./lib/passkey-auth.ts\");\n/* __next_internal_client_entry_do_not_use__ usePasskeyWallet,PasskeyWalletProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst PasskeyWalletContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction usePasskeyWallet() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PasskeyWalletContext);\n    if (context === undefined) {\n        throw new Error(\"usePasskeyWallet must be used within a PasskeyWalletProvider\");\n    }\n    return context;\n}\n_s(usePasskeyWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction PasskeyWalletProvider(param) {\n    let { children } = param;\n    _s1();\n    const { vlei, verifyCredentials } = (0,_VLEIContext__WEBPACK_IMPORTED_MODULE_2__.useVLEI)();\n    const [wallet, setWallet] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isConnected: false,\n        address: null,\n        contractId: null,\n        role: null,\n        credentials: null,\n        error: null,\n        loading: false\n    });\n    const [passkeyService, setPasskeyService] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const connectWallet = async (role)=>{\n        try {\n            setWallet((prev)=>({\n                    ...prev,\n                    error: null,\n                    loading: true\n                }));\n            console.log(\"\\uD83D\\uDD10 Starting biometric authentication for \".concat(role, \"...\"));\n            // Create PasskeyAuthenticator instance\n            const config = (0,_lib_passkey_auth__WEBPACK_IMPORTED_MODULE_3__.getDefaultPasskeyConfig)();\n            const authenticator = (0,_lib_passkey_auth__WEBPACK_IMPORTED_MODULE_3__.createPasskeyAuthenticator)(config);\n            // Step 1: Authenticate with Passkey (biometric) - following the flow diagram\n            const userName = role === \"buyer\" ? \"John Doe - TechCorp CFO\" : \"Jane Smith - SupplierCo Sales\";\n            // Create or connect to smart wallet with biometric authentication\n            const walletInfo = await authenticator.createOrConnectWallet(userName, role);\n            // Store authenticator for future use\n            setPasskeyService(authenticator);\n            const address = walletInfo.address;\n            const contractId = walletInfo.contractId;\n            // Verify vLEI credentials\n            let credentials = null;\n            if (vlei.isInitialized) {\n                try {\n                    credentials = await verifyCredentials(role);\n                } catch (error) {\n                    console.warn(\"vLEI credential verification failed:\", error);\n                // Continue without credentials for now\n                }\n            }\n            setWallet({\n                isConnected: true,\n                address,\n                contractId,\n                role,\n                credentials,\n                error: null,\n                loading: false\n            });\n            // Store in localStorage for persistence\n            localStorage.setItem(\"passkeyWalletState\", JSON.stringify({\n                isConnected: true,\n                address,\n                contractId,\n                role,\n                credentials\n            }));\n            console.log(\"✅ \".concat(role, \" wallet connected successfully\"));\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to connect wallet\";\n            setWallet((prev)=>({\n                    ...prev,\n                    error: errorMessage,\n                    loading: false\n                }));\n            console.error(\"❌ Wallet connection failed:\", error);\n        }\n    };\n    const disconnectWallet = ()=>{\n        try {\n            if (passkeyService && typeof passkeyService.disconnect === \"function\") {\n                passkeyService.disconnect();\n            }\n        } catch (error) {\n            console.warn(\"Error during wallet disconnect:\", error);\n        }\n        setWallet({\n            isConnected: false,\n            address: null,\n            contractId: null,\n            role: null,\n            credentials: null,\n            error: null,\n            loading: false\n        });\n        setPasskeyService(null);\n        localStorage.removeItem(\"passkeyWalletState\");\n        console.log(\"\\uD83D\\uDD0C Wallet disconnected\");\n    };\n    const switchRole = async (role)=>{\n        if (wallet.isConnected) {\n            await connectWallet(role);\n        }\n    };\n    const executeTransaction = async (params)=>{\n        if (!passkeyService || !wallet.isConnected) {\n            throw new Error(\"Wallet not connected\");\n        }\n        try {\n            setWallet((prev)=>({\n                    ...prev,\n                    loading: true,\n                    error: null\n                }));\n            const result = await passkeyService.executeTransaction(params);\n            setWallet((prev)=>({\n                    ...prev,\n                    loading: false\n                }));\n            return result;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Transaction failed\";\n            setWallet((prev)=>({\n                    ...prev,\n                    error: errorMessage,\n                    loading: false\n                }));\n            throw error;\n        }\n    };\n    const getAccountInfo = async ()=>{\n        if (!passkeyService || !wallet.isConnected) {\n            throw new Error(\"Wallet not connected\");\n        }\n        return await passkeyService.getAccountInfo();\n    };\n    // Restore wallet state on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const savedState = localStorage.getItem(\"passkeyWalletState\");\n        if (savedState) {\n            try {\n                const parsed = JSON.parse(savedState);\n                if (parsed.isConnected && parsed.role) {\n                    // Don't auto-connect, just restore the state\n                    setWallet((prev)=>({\n                            ...prev,\n                            ...parsed,\n                            loading: false,\n                            error: null\n                        }));\n                }\n            } catch (error) {\n                console.error(\"Failed to restore wallet state:\", error);\n                localStorage.removeItem(\"passkeyWalletState\");\n            }\n        }\n    }, []);\n    // Update credentials when vLEI is initialized and credentials are available\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (vlei.isInitialized && wallet.isConnected && wallet.role) {\n            // Check if credentials are available before trying to verify\n            const hasCredentials = wallet.role === \"buyer\" ? vlei.credentials.john && vlei.credentials.techcorp : vlei.credentials.jane && vlei.credentials.supplierco;\n            if (hasCredentials) {\n                verifyCredentials(wallet.role).then((credentials)=>{\n                    setWallet((prev)=>({\n                            ...prev,\n                            credentials\n                        }));\n                }).catch((error)=>{\n                    console.warn(\"Failed to update credentials:\", error);\n                });\n            } else {\n                // Use mock credentials if real ones aren't available yet\n                const mockCredentials = {\n                    valid: true,\n                    orgLEI: wallet.role === \"buyer\" ? \"506700GE1G29325QX363\" : \"549300XOCUZD4EMKGY96\",\n                    personName: wallet.role === \"buyer\" ? \"John Doe\" : \"Jane Smith\",\n                    role: wallet.role === \"buyer\" ? \"Procurement Manager\" : \"Contract Signer\",\n                    spendingLimit: wallet.role === \"buyer\" ? 100000 : 500000,\n                    maxContractValue: wallet.role === \"buyer\" ? 100000 : 500000,\n                    details: {\n                        orgName: wallet.role === \"buyer\" ? \"TechCorp Inc.\" : \"SupplierCo LLC\",\n                        lei: wallet.role === \"buyer\" ? \"506700GE1G29325QX363\" : \"549300XOCUZD4EMKGY96\",\n                        personName: wallet.role === \"buyer\" ? \"John Doe\" : \"Jane Smith\",\n                        role: wallet.role === \"buyer\" ? \"Procurement Manager\" : \"Contract Signer\",\n                        spendingLimit: wallet.role === \"buyer\" ? 100000 : 500000,\n                        maxContractValue: wallet.role === \"buyer\" ? 100000 : 500000\n                    }\n                };\n                setWallet((prev)=>({\n                        ...prev,\n                        credentials: mockCredentials\n                    }));\n            }\n        }\n    }, [\n        vlei.isInitialized,\n        wallet.isConnected,\n        wallet.role,\n        vlei.credentials\n    ]);\n    const value = {\n        wallet,\n        connectWallet,\n        disconnectWallet,\n        switchRole,\n        executeTransaction,\n        getAccountInfo\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PasskeyWalletContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/amanpal/Desktop/Stellar-Smart Contract-Wallets/contexts/PasskeyWalletContext.tsx\",\n        lineNumber: 246,\n        columnNumber: 5\n    }, this);\n}\n_s1(PasskeyWalletProvider, \"LgI1+g3DTq8nAWsUs9BBnVbs2c0=\", false, function() {\n    return [\n        _VLEIContext__WEBPACK_IMPORTED_MODULE_2__.useVLEI\n    ];\n});\n_c = PasskeyWalletProvider;\nvar _c;\n$RefreshReg$(_c, \"PasskeyWalletProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contexts/PasskeyWalletContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/passkey-auth.ts":
/*!*****************************!*\
  !*** ./lib/passkey-auth.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PasskeyAuthenticator: function() { return /* binding */ PasskeyAuthenticator; },\n/* harmony export */   createPasskeyAuthenticator: function() { return /* binding */ createPasskeyAuthenticator; },\n/* harmony export */   getDefaultPasskeyConfig: function() { return /* binding */ getDefaultPasskeyConfig; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// Real Passkey Authentication Implementation\n// Following the complete flow diagram from the documentation\nclass PasskeyAuthenticator {\n    /**\n   * Step 1: Authenticate with Passkey (biometric)\n   * This is the core biometric authentication step from the flow diagram\n   */ async authenticateWithPasskey(userName) {\n        try {\n            console.log(\"\\uD83D\\uDD10 Starting biometric authentication for: \".concat(userName));\n            // Check if WebAuthn is supported\n            if (!window.PublicKeyCredential) {\n                throw new Error(\"WebAuthn/Passkeys not supported in this browser\");\n            }\n            // Check if user has existing credentials\n            const existingCredentials = await this.getExistingCredentials(userName);\n            if (existingCredentials.length > 0) {\n                // Use existing credential for authentication\n                return await this.authenticateWithExistingCredential(existingCredentials[0]);\n            } else {\n                // Create new credential\n                return await this.createNewCredential(userName);\n            }\n        } catch (error) {\n            console.error(\"❌ Biometric authentication failed:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Authentication failed\"\n            };\n        }\n    }\n    /**\n   * Create new passkey credential\n   */ async createNewCredential(userName) {\n        try {\n            console.log(\"\\uD83C\\uDD95 Creating new passkey credential for: \".concat(userName));\n            const challenge = new Uint8Array(32);\n            crypto.getRandomValues(challenge);\n            const credential = await navigator.credentials.create({\n                publicKey: {\n                    challenge,\n                    rp: {\n                        name: \"Stellar Procurement dApp\",\n                        id: window.location.hostname\n                    },\n                    user: {\n                        id: new TextEncoder().encode(userName),\n                        name: userName,\n                        displayName: userName\n                    },\n                    pubKeyCredParams: [\n                        {\n                            type: \"public-key\",\n                            alg: -7\n                        },\n                        {\n                            type: \"public-key\",\n                            alg: -257\n                        }\n                    ],\n                    authenticatorSelection: {\n                        authenticatorAttachment: \"platform\",\n                        userVerification: \"required\",\n                        residentKey: \"required\"\n                    },\n                    timeout: 60000,\n                    attestation: \"direct\"\n                }\n            });\n            if (!credential) {\n                throw new Error(\"Failed to create passkey credential\");\n            }\n            console.log(\"✅ New passkey credential created successfully\");\n            return {\n                success: true,\n                credentialId: credential.id,\n                publicKey: this.arrayBufferToBase64(credential.response.publicKey || new ArrayBuffer(0))\n            };\n        } catch (error) {\n            console.error(\"❌ Failed to create passkey credential:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Credential creation failed\"\n            };\n        }\n    }\n    /**\n   * Authenticate with existing credential\n   */ async authenticateWithExistingCredential(credentialId) {\n        try {\n            console.log(\"\\uD83D\\uDD11 Authenticating with existing credential: \".concat(credentialId));\n            const challenge = new Uint8Array(32);\n            crypto.getRandomValues(challenge);\n            const assertion = await navigator.credentials.get({\n                publicKey: {\n                    challenge,\n                    allowCredentials: [\n                        {\n                            type: \"public-key\",\n                            id: this.base64ToArrayBuffer(credentialId)\n                        }\n                    ],\n                    userVerification: \"required\",\n                    timeout: 60000\n                }\n            });\n            if (!assertion) {\n                throw new Error(\"Failed to authenticate with passkey\");\n            }\n            console.log(\"✅ Biometric authentication successful\");\n            return {\n                success: true,\n                credentialId: assertion.id,\n                signature: this.arrayBufferToBase64(assertion.response.signature)\n            };\n        } catch (error) {\n            console.error(\"❌ Failed to authenticate with existing credential:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Authentication failed\"\n            };\n        }\n    }\n    /**\n   * Get existing credentials for a user\n   */ async getExistingCredentials(userName) {\n        try {\n            // In a real implementation, you would store credential IDs\n            // For now, we'll check localStorage\n            const storedCredentials = localStorage.getItem(\"passkey_credentials_\".concat(userName));\n            return storedCredentials ? JSON.parse(storedCredentials) : [];\n        } catch (error) {\n            console.error(\"❌ Failed to get existing credentials:\", error);\n            return [];\n        }\n    }\n    /**\n   * Store credential ID for future use\n   */ storeCredentialId(userName, credentialId) {\n        try {\n            const existingCredentials = this.getExistingCredentials(userName);\n            if (!existingCredentials.includes(credentialId)) {\n                existingCredentials.push(credentialId);\n                localStorage.setItem(\"passkey_credentials_\".concat(userName), JSON.stringify(existingCredentials));\n            }\n        } catch (error) {\n            console.error(\"❌ Failed to store credential ID:\", error);\n        }\n    }\n    /**\n   * Step 2: Create or connect to Stellar smart wallet\n   * This follows the \"Passkey-Kit signs transaction\" step from the flow\n   */ async createOrConnectWallet(userName, role) {\n        try {\n            console.log(\"\\uD83C\\uDFE6 Creating/connecting smart wallet for \".concat(role, \": \").concat(userName));\n            // First authenticate with passkey\n            const authResult = await this.authenticateWithPasskey(userName);\n            if (!authResult.success) {\n                throw new Error(\"Biometric authentication failed: \".concat(authResult.error));\n            }\n            // Store credential ID for future use\n            if (authResult.credentialId) {\n                this.storeCredentialId(userName, authResult.credentialId);\n            }\n            // Generate Stellar keypair (in real implementation, this would be derived from passkey)\n            const keypair = this.generateStellarKeypair(authResult.credentialId || userName);\n            // Create smart wallet contract (simplified - in real implementation, this would use Passkey-Kit)\n            const contractId = await this.deploySmartWallet(keypair, userName, role);\n            this.walletInfo = {\n                address: keypair.publicKey(),\n                contractId: contractId,\n                isConnected: true\n            };\n            console.log(\"✅ Smart wallet created/connected successfully\");\n            console.log(\"\\uD83D\\uDCCD Address: \".concat(this.walletInfo.address));\n            console.log(\"\\uD83D\\uDCC4 Contract ID: \".concat(this.walletInfo.contractId));\n            return this.walletInfo;\n        } catch (error) {\n            console.error(\"❌ Failed to create/connect wallet:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Step 3: Sign transaction with passkey\n   * This is the \"Passkey-Kit signs transaction\" step from the flow\n   */ async signTransactionWithPasskey(transaction, userName) {\n        try {\n            console.log(\"✍️ Signing transaction with passkey for: \".concat(userName));\n            // Authenticate with passkey first\n            const authResult = await this.authenticateWithPasskey(userName);\n            if (!authResult.success) {\n                throw new Error(\"Biometric authentication failed: \".concat(authResult.error));\n            }\n            // In a real implementation, you would use the passkey signature to sign the transaction\n            // For now, we'll simulate the signing process\n            console.log(\"✅ Transaction signed with passkey successfully\");\n            return transaction;\n        } catch (error) {\n            console.error(\"❌ Failed to sign transaction with passkey:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Generate Stellar keypair (simplified implementation)\n   */ generateStellarKeypair(seed) {\n        // In a real implementation, this would use proper key derivation\n        // For now, we'll create a deterministic keypair\n        const hash = new TextEncoder().encode(seed);\n        const keypair = {\n            publicKey: ()=>\"G\".concat(seed.substring(0, 55)),\n            secret: ()=>\"S\".concat(seed.substring(0, 55))\n        };\n        return keypair;\n    }\n    /**\n   * Deploy smart wallet contract (simplified implementation)\n   */ async deploySmartWallet(keypair, userName, role) {\n        // In a real implementation, this would deploy an actual smart wallet contract\n        // For now, we'll return a mock contract ID\n        const contractId = \"CC\".concat(role.toUpperCase(), \"_\").concat(userName.replace(/\\s+/g, \"_\"), \"_\").concat(Date.now());\n        console.log(\"\\uD83D\\uDCC4 Smart wallet contract deployed: \".concat(contractId));\n        return contractId;\n    }\n    /**\n   * Utility functions\n   */ arrayBufferToBase64(buffer) {\n        const bytes = new Uint8Array(buffer);\n        let binary = \"\";\n        for(let i = 0; i < bytes.byteLength; i++){\n            binary += String.fromCharCode(bytes[i]);\n        }\n        return btoa(binary);\n    }\n    base64ToArrayBuffer(base64) {\n        const binary = atob(base64);\n        const bytes = new Uint8Array(binary.length);\n        for(let i = 0; i < binary.length; i++){\n            bytes[i] = binary.charCodeAt(i);\n        }\n        return bytes.buffer;\n    }\n    /**\n   * Get current wallet info\n   */ getWalletInfo() {\n        return this.walletInfo;\n    }\n    /**\n   * Disconnect wallet\n   */ disconnect() {\n        this.walletInfo = null;\n        console.log(\"\\uD83D\\uDD0C Wallet disconnected\");\n    }\n    constructor(config){\n        this.walletInfo = null;\n        this.config = config;\n    }\n}\n// Factory function to create PasskeyAuthenticator\nfunction createPasskeyAuthenticator(config) {\n    return new PasskeyAuthenticator(config);\n}\n// Default configuration\nfunction getDefaultPasskeyConfig() {\n    return {\n        rpcUrl: process.env.NEXT_PUBLIC_RPC_URL || \"https://soroban-testnet.stellar.org\",\n        networkPassphrase: process.env.NEXT_PUBLIC_NETWORK_PASSPHRASE || \"Test SDF Network ; September 2015\",\n        factoryContractId: process.env.NEXT_PUBLIC_FACTORY_CONTRACT_ID || \"CCWJFJ7YQHZ3QH2GQYQZQZQZQZQZQZQZQZQZQZQZQZQZQZQ\"\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/passkey-auth.ts\n"));

/***/ })

});