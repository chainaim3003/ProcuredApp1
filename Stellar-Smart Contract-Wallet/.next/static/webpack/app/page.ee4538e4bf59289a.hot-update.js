"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/passkey-auth.ts":
/*!*****************************!*\
  !*** ./lib/passkey-auth.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PasskeyAuthenticator: function() { return /* binding */ PasskeyAuthenticator; },\n/* harmony export */   createPasskeyAuthenticator: function() { return /* binding */ createPasskeyAuthenticator; },\n/* harmony export */   getDefaultPasskeyConfig: function() { return /* binding */ getDefaultPasskeyConfig; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// Real Passkey Authentication Implementation\n// Following the complete flow diagram from the documentation\nclass PasskeyAuthenticator {\n    /**\n   * Step 1: Authenticate with Passkey (biometric)\n   * This is the core biometric authentication step from the flow diagram\n   */ async authenticateWithPasskey(userName) {\n        try {\n            console.log(\"\\uD83D\\uDD10 Starting biometric authentication for: \".concat(userName));\n            // Check if WebAuthn is supported\n            if (!window.PublicKeyCredential) {\n                throw new Error(\"WebAuthn/Passkeys not supported in this browser\");\n            }\n            // Check if user has existing credentials\n            const existingCredentials = await this.getExistingCredentials(userName);\n            if (existingCredentials.length > 0) {\n                // Use existing credential for authentication\n                return await this.authenticateWithExistingCredential(existingCredentials[0]);\n            } else {\n                // Create new credential\n                return await this.createNewCredential(userName);\n            }\n        } catch (error) {\n            console.error(\"❌ Biometric authentication failed:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Authentication failed\"\n            };\n        }\n    }\n    /**\n   * Create new passkey credential\n   */ async createNewCredential(userName) {\n        try {\n            console.log(\"\\uD83C\\uDD95 Creating new passkey credential for: \".concat(userName));\n            const challenge = new Uint8Array(32);\n            crypto.getRandomValues(challenge);\n            const credential = await navigator.credentials.create({\n                publicKey: {\n                    challenge,\n                    rp: {\n                        name: \"Stellar Procurement dApp\",\n                        id: window.location.hostname\n                    },\n                    user: {\n                        id: new TextEncoder().encode(userName),\n                        name: userName,\n                        displayName: userName\n                    },\n                    pubKeyCredParams: [\n                        {\n                            type: \"public-key\",\n                            alg: -7\n                        },\n                        {\n                            type: \"public-key\",\n                            alg: -257\n                        }\n                    ],\n                    authenticatorSelection: {\n                        authenticatorAttachment: \"platform\",\n                        userVerification: \"required\",\n                        residentKey: \"required\"\n                    },\n                    timeout: 60000,\n                    attestation: \"direct\"\n                }\n            });\n            if (!credential) {\n                throw new Error(\"Failed to create passkey credential\");\n            }\n            console.log(\"✅ New passkey credential created successfully\");\n            return {\n                success: true,\n                credentialId: credential.id,\n                publicKey: this.arrayBufferToBase64(credential.response.publicKey || new ArrayBuffer(0))\n            };\n        } catch (error) {\n            console.error(\"❌ Failed to create passkey credential:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Credential creation failed\"\n            };\n        }\n    }\n    /**\n   * Authenticate with existing credential\n   */ async authenticateWithExistingCredential(credentialId) {\n        try {\n            console.log(\"\\uD83D\\uDD11 Authenticating with existing credential: \".concat(credentialId));\n            const challenge = new Uint8Array(32);\n            crypto.getRandomValues(challenge);\n            const assertion = await navigator.credentials.get({\n                publicKey: {\n                    challenge,\n                    allowCredentials: [\n                        {\n                            type: \"public-key\",\n                            id: this.base64ToArrayBuffer(credentialId)\n                        }\n                    ],\n                    userVerification: \"required\",\n                    timeout: 60000\n                }\n            });\n            if (!assertion) {\n                throw new Error(\"Failed to authenticate with passkey\");\n            }\n            console.log(\"✅ Biometric authentication successful\");\n            return {\n                success: true,\n                credentialId: assertion.id,\n                signature: this.arrayBufferToBase64(assertion.response.signature)\n            };\n        } catch (error) {\n            console.error(\"❌ Failed to authenticate with existing credential:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Authentication failed\"\n            };\n        }\n    }\n    /**\n   * Get existing credentials for a user\n   */ async getExistingCredentials(userName) {\n        try {\n            // In a real implementation, you would store credential IDs\n            // For now, we'll check localStorage\n            const storedCredentials = localStorage.getItem(\"passkey_credentials_\".concat(userName));\n            return storedCredentials ? JSON.parse(storedCredentials) : [];\n        } catch (error) {\n            console.error(\"❌ Failed to get existing credentials:\", error);\n            return [];\n        }\n    }\n    /**\n   * Store credential ID for future use\n   */ async storeCredentialId(userName, credentialId) {\n        try {\n            const existingCredentials = await this.getExistingCredentials(userName);\n            if (!existingCredentials.includes(credentialId)) {\n                existingCredentials.push(credentialId);\n                localStorage.setItem(\"passkey_credentials_\".concat(userName), JSON.stringify(existingCredentials));\n            }\n        } catch (error) {\n            console.error(\"❌ Failed to store credential ID:\", error);\n        }\n    }\n    /**\n   * Step 2: Create or connect to Stellar smart wallet\n   * This follows the \"Passkey-Kit signs transaction\" step from the flow\n   */ async createOrConnectWallet(userName, role) {\n        try {\n            console.log(\"\\uD83C\\uDFE6 Creating/connecting smart wallet for \".concat(role, \": \").concat(userName));\n            // First authenticate with passkey\n            const authResult = await this.authenticateWithPasskey(userName);\n            if (!authResult.success) {\n                throw new Error(\"Biometric authentication failed: \".concat(authResult.error));\n            }\n            // Store credential ID for future use\n            if (authResult.credentialId) {\n                await this.storeCredentialId(userName, authResult.credentialId);\n            }\n            // Generate Stellar keypair (in real implementation, this would be derived from passkey)\n            const keypair = this.generateStellarKeypair(authResult.credentialId || userName);\n            // Create smart wallet contract (simplified - in real implementation, this would use Passkey-Kit)\n            const contractId = await this.deploySmartWallet(keypair, userName, role);\n            this.walletInfo = {\n                address: keypair.publicKey(),\n                contractId: contractId,\n                isConnected: true\n            };\n            console.log(\"✅ Smart wallet created/connected successfully\");\n            console.log(\"\\uD83D\\uDCCD Address: \".concat(this.walletInfo.address));\n            console.log(\"\\uD83D\\uDCC4 Contract ID: \".concat(this.walletInfo.contractId));\n            return this.walletInfo;\n        } catch (error) {\n            console.error(\"❌ Failed to create/connect wallet:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Step 3: Sign transaction with passkey\n   * This is the \"Passkey-Kit signs transaction\" step from the flow\n   */ async signTransactionWithPasskey(transaction, userName) {\n        try {\n            console.log(\"✍️ Signing transaction with passkey for: \".concat(userName));\n            // Authenticate with passkey first\n            const authResult = await this.authenticateWithPasskey(userName);\n            if (!authResult.success) {\n                throw new Error(\"Biometric authentication failed: \".concat(authResult.error));\n            }\n            // In a real implementation, you would use the passkey signature to sign the transaction\n            // For now, we'll simulate the signing process\n            console.log(\"✅ Transaction signed with passkey successfully\");\n            return transaction;\n        } catch (error) {\n            console.error(\"❌ Failed to sign transaction with passkey:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Generate Stellar keypair (simplified implementation)\n   */ generateStellarKeypair(seed) {\n        // In a real implementation, this would use proper key derivation\n        // For now, we'll create a deterministic keypair\n        const hash = new TextEncoder().encode(seed);\n        const keypair = {\n            publicKey: ()=>\"G\".concat(seed.substring(0, 55)),\n            secret: ()=>\"S\".concat(seed.substring(0, 55))\n        };\n        return keypair;\n    }\n    /**\n   * Deploy smart wallet contract (simplified implementation)\n   */ async deploySmartWallet(keypair, userName, role) {\n        // In a real implementation, this would deploy an actual smart wallet contract\n        // For now, we'll return a mock contract ID\n        const contractId = \"CC\".concat(role.toUpperCase(), \"_\").concat(userName.replace(/\\s+/g, \"_\"), \"_\").concat(Date.now());\n        console.log(\"\\uD83D\\uDCC4 Smart wallet contract deployed: \".concat(contractId));\n        return contractId;\n    }\n    /**\n   * Utility functions\n   */ arrayBufferToBase64(buffer) {\n        const bytes = new Uint8Array(buffer);\n        let binary = \"\";\n        for(let i = 0; i < bytes.byteLength; i++){\n            binary += String.fromCharCode(bytes[i]);\n        }\n        return btoa(binary);\n    }\n    base64ToArrayBuffer(base64) {\n        const binary = atob(base64);\n        const bytes = new Uint8Array(binary.length);\n        for(let i = 0; i < binary.length; i++){\n            bytes[i] = binary.charCodeAt(i);\n        }\n        return bytes.buffer;\n    }\n    /**\n   * Get current wallet info\n   */ getWalletInfo() {\n        return this.walletInfo;\n    }\n    /**\n   * Disconnect wallet\n   */ disconnect() {\n        this.walletInfo = null;\n        console.log(\"\\uD83D\\uDD0C Wallet disconnected\");\n    }\n    constructor(config){\n        this.walletInfo = null;\n        this.config = config;\n    }\n}\n// Factory function to create PasskeyAuthenticator\nfunction createPasskeyAuthenticator(config) {\n    return new PasskeyAuthenticator(config);\n}\n// Default configuration\nfunction getDefaultPasskeyConfig() {\n    return {\n        rpcUrl: process.env.NEXT_PUBLIC_RPC_URL || \"https://soroban-testnet.stellar.org\",\n        networkPassphrase: process.env.NEXT_PUBLIC_NETWORK_PASSPHRASE || \"Test SDF Network ; September 2015\",\n        factoryContractId: process.env.NEXT_PUBLIC_FACTORY_CONTRACT_ID || \"CCWJFJ7YQHZ3QH2GQYQZQZQZQZQZQZQZQZQZQZQZQZQZQZQ\"\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/passkey-auth.ts\n"));

/***/ })

});