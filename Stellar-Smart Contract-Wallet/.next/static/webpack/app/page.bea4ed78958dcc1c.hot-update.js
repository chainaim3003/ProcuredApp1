"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./contexts/VLEIContext.tsx":
/*!**********************************!*\
  !*** ./contexts/VLEIContext.tsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VLEIProvider: function() { return /* binding */ VLEIProvider; },\n/* harmony export */   useVLEI: function() { return /* binding */ useVLEI; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/* __next_internal_client_entry_do_not_use__ useVLEI,VLEIProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst VLEIContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction useVLEI() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(VLEIContext);\n    if (context === undefined) {\n        throw new Error(\"useVLEI must be used within a VLEIProvider\");\n    }\n    return context;\n}\n_s(useVLEI, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction VLEIProvider(param) {\n    let { children } = param;\n    _s1();\n    const [vlei, setVlei] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isInitialized: false,\n        techcorpService: null,\n        suppliercoService: null,\n        gleifService: null,\n        techcorpAID: null,\n        suppliercoAID: null,\n        johnAID: null,\n        janeAID: null,\n        credentials: {\n            techcorp: null,\n            supplierco: null,\n            john: null,\n            jane: null\n        },\n        error: null\n    });\n    const initializeVLEI = async ()=>{\n        try {\n            setVlei((prev)=>({\n                    ...prev,\n                    error: null\n                }));\n            console.log(\"\\uD83D\\uDE80 Initializing vLEI infrastructure...\");\n            // Use mock implementation for now (Phase 2 will use real implementation when packages are stable)\n            const mockModule = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_lib_mock-signify-ts_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/lib/mock-signify-ts */ \"(app-pages-browser)/./lib/mock-signify-ts.ts\"));\n            const VLEIService = mockModule.MockSignifyClient;\n            const generateBran = mockModule.randomPasscode;\n            const Tier = mockModule.Tier;\n            // Create KERIA service configurations\n            const techcorpConfig = {\n                keriaUrl: process.env.NEXT_PUBLIC_KERIA_TECHCORP_URL || \"http://localhost:3901\",\n                bran: generateBran(),\n                tier: Tier.low,\n                bootUrl: process.env.NEXT_PUBLIC_KERIA_BOOT_URL || \"http://localhost:3903\"\n            };\n            const suppliercoConfig = {\n                keriaUrl: process.env.NEXT_PUBLIC_KERIA_SUPPLIERCO_URL || \"http://localhost:3904\",\n                bran: generateBran(),\n                tier: Tier.low,\n                bootUrl: process.env.NEXT_PUBLIC_KERIA_BOOT_URL || \"http://localhost:3903\"\n            };\n            const gleifConfig = {\n                keriaUrl: process.env.NEXT_PUBLIC_KERIA_GLEIF_URL || \"http://localhost:3906\",\n                bran: generateBran(),\n                tier: Tier.low,\n                bootUrl: process.env.NEXT_PUBLIC_KERIA_BOOT_URL || \"http://localhost:3903\"\n            };\n            // Create service instances\n            const techcorpService = new VLEIService(techcorpConfig);\n            const suppliercoService = new VLEIService(suppliercoConfig);\n            const gleifService = new VLEIService(gleifConfig);\n            // Initialize services\n            await Promise.all([\n                techcorpService.initialize(),\n                suppliercoService.initialize(),\n                gleifService.initialize()\n            ]);\n            setVlei((prev)=>({\n                    ...prev,\n                    isInitialized: true,\n                    techcorpService,\n                    suppliercoService,\n                    gleifService\n                }));\n            console.log(\"✅ vLEI infrastructure initialized successfully\");\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to initialize vLEI\";\n            setVlei((prev)=>({\n                    ...prev,\n                    error: errorMessage\n                }));\n            console.error(\"❌ vLEI initialization failed:\", error);\n        }\n    };\n    const issueCredentials = async ()=>{\n        if (!vlei.isInitialized || !vlei.techcorpService || !vlei.suppliercoService || !vlei.gleifService) {\n            throw new Error(\"vLEI services not initialized\");\n        }\n        try {\n            console.log(\"\\uD83D\\uDCDC Issuing vLEI credentials...\");\n            // Create organizational AIDs\n            const techcorpAID = await vlei.techcorpService.createOrganizationAID({\n                name: \"TechCorp\",\n                lei: \"506700GE1G29325QX363\",\n                legalName: \"TechCorp Inc.\",\n                jurisdiction: \"US-DE\"\n            });\n            const suppliercoAID = await vlei.suppliercoService.createOrganizationAID({\n                name: \"SupplierCo\",\n                lei: \"549300XOCUZD4EMKGY96\",\n                legalName: \"SupplierCo LLC\",\n                jurisdiction: \"US-CA\"\n            });\n            // Create personal AIDs\n            const johnAID = await vlei.techcorpService.createPersonAID({\n                name: \"John-CFO\",\n                legalName: \"John Doe\",\n                role: \"Chief Financial Officer\",\n                organizationLEI: \"506700GE1G29325QX363\"\n            });\n            const janeAID = await vlei.suppliercoService.createPersonAID({\n                name: \"Jane-Sales\",\n                legalName: \"Jane Smith\",\n                role: \"Sales Director\",\n                organizationLEI: \"549300XOCUZD4EMKGY96\"\n            });\n            // Issue QVI credentials (simulated - in real implementation, GLEIF would issue these)\n            const techcorpQVI = {\n                sad: {\n                    d: \"QVI_\".concat(Date.now()),\n                    i: \"EIDUavcmyHBseNZAdAHR3SF8QMfX1kSJ3Ct0OqS0-HCW\",\n                    a: {\n                        i: techcorpAID,\n                        LEI: \"506700GE1G29325QX363\",\n                        legalName: \"TechCorp Inc.\"\n                    }\n                }\n            };\n            const suppliercoQVI = {\n                sad: {\n                    d: \"QVI_\".concat(Date.now() + 1),\n                    i: \"EIDUavcmyHBseNZAdAHR3SF8QMfX1kSJ3Ct0OqS0-HCW\",\n                    a: {\n                        i: suppliercoAID,\n                        LEI: \"549300XOCUZD4EMKGY96\",\n                        legalName: \"SupplierCo LLC\"\n                    }\n                }\n            };\n            // Issue OOR credentials\n            const johnOOR = await vlei.techcorpService.issueOORCredential(techcorpAID, johnAID, {\n                name: \"John-CFO\",\n                legalName: \"John Doe\",\n                role: \"Chief Financial Officer\",\n                organizationLEI: \"506700GE1G29325QX363\"\n            });\n            const janeOOR = await vlei.suppliercoService.issueOORCredential(suppliercoAID, janeAID, {\n                name: \"Jane-Sales\",\n                legalName: \"Jane Smith\",\n                role: \"Sales Director\",\n                organizationLEI: \"549300XOCUZD4EMKGY96\"\n            });\n            // Issue ECR credentials\n            const johnECR = await vlei.techcorpService.issueECRCredential(techcorpAID, johnAID, {\n                name: \"John-CFO\",\n                legalName: \"John Doe\",\n                role: \"Procurement Manager\",\n                organizationLEI: \"506700GE1G29325QX363\"\n            }, johnOOR.sad.d, 100000 // $100k spending limit\n            );\n            const janeECR = await vlei.suppliercoService.issueECRCredential(suppliercoAID, janeAID, {\n                name: \"Jane-Sales\",\n                legalName: \"Jane Smith\",\n                role: \"Contract Signer\",\n                organizationLEI: \"549300XOCUZD4EMKGY96\"\n            }, janeOOR.sad.d, undefined, 500000 // $500k max contract value\n            );\n            setVlei((prev)=>({\n                    ...prev,\n                    techcorpAID,\n                    suppliercoAID,\n                    johnAID,\n                    janeAID,\n                    credentials: {\n                        techcorp: {\n                            qvi: techcorpQVI\n                        },\n                        supplierco: {\n                            qvi: suppliercoQVI\n                        },\n                        john: {\n                            oor: johnOOR,\n                            ecr: johnECR\n                        },\n                        jane: {\n                            oor: janeOOR,\n                            ecr: janeECR\n                        }\n                    }\n                }));\n            console.log(\"✅ All vLEI credentials issued successfully\");\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to issue credentials\";\n            setVlei((prev)=>({\n                    ...prev,\n                    error: errorMessage\n                }));\n            console.error(\"❌ Credential issuance failed:\", error);\n            throw error;\n        }\n    };\n    const verifyCredentials = async (role)=>{\n        if (!vlei.isInitialized) {\n            throw new Error(\"vLEI not initialized\");\n        }\n        try {\n            const service = role === \"buyer\" ? vlei.techcorpService : vlei.suppliercoService;\n            const personCredentials = role === \"buyer\" ? vlei.credentials.john : vlei.credentials.jane;\n            const orgCredentials = role === \"buyer\" ? vlei.credentials.techcorp : vlei.credentials.supplierco;\n            if (!service) {\n                throw new Error(\"vLEI service not available\");\n            }\n            if (!personCredentials || !orgCredentials) {\n                console.warn(\"Credentials not yet issued, returning mock verification\");\n                // Return mock verification if credentials aren't available yet\n                return {\n                    valid: true,\n                    orgLEI: role === \"buyer\" ? \"506700GE1G29325QX363\" : \"549300XOCUZD4EMKGY96\",\n                    personName: role === \"buyer\" ? \"John Doe\" : \"Jane Smith\",\n                    role: role === \"buyer\" ? \"Procurement Manager\" : \"Contract Signer\",\n                    spendingLimit: role === \"buyer\" ? 100000 : 500000,\n                    maxContractValue: role === \"buyer\" ? 100000 : 500000,\n                    details: {\n                        orgName: role === \"buyer\" ? \"TechCorp Inc.\" : \"SupplierCo LLC\",\n                        lei: role === \"buyer\" ? \"506700GE1G29325QX363\" : \"549300XOCUZD4EMKGY96\",\n                        personName: role === \"buyer\" ? \"John Doe\" : \"Jane Smith\",\n                        role: role === \"buyer\" ? \"Procurement Manager\" : \"Contract Signer\",\n                        spendingLimit: role === \"buyer\" ? 100000 : 500000,\n                        maxContractValue: role === \"buyer\" ? 100000 : 500000\n                    }\n                };\n            }\n            const result = await service.verifyCredentialChain(personCredentials.ecr, personCredentials.oor, orgCredentials.qvi);\n            return result;\n        } catch (error) {\n            console.error(\"❌ Credential verification failed:\", error);\n            throw error;\n        }\n    };\n    const getCredentials = async (aid)=>{\n        if (!vlei.isInitialized) {\n            throw new Error(\"vLEI not initialized\");\n        }\n        // Determine which service to use based on AID\n        let service = null;\n        if (aid === vlei.techcorpAID) {\n            service = vlei.techcorpService;\n        } else if (aid === vlei.suppliercoAID) {\n            service = vlei.suppliercoService;\n        } else if (aid === vlei.johnAID) {\n            service = vlei.techcorpService;\n        } else if (aid === vlei.janeAID) {\n            service = vlei.suppliercoService;\n        }\n        if (!service) {\n            throw new Error(\"Service not found for AID\");\n        }\n        return await service.getCredentials(aid);\n    };\n    // Auto-initialize on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!vlei.isInitialized && !vlei.error) {\n            initializeVLEI();\n        }\n    }, []);\n    const value = {\n        vlei,\n        initializeVLEI,\n        issueCredentials,\n        verifyCredentials,\n        getCredentials\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(VLEIContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/amanpal/Desktop/Stellar-Smart Contract-Wallets/contexts/VLEIContext.tsx\",\n        lineNumber: 343,\n        columnNumber: 5\n    }, this);\n}\n_s1(VLEIProvider, \"eeXGXTbzcAp1K4p0MD3nQLncu5E=\");\n_c = VLEIProvider;\nvar _c;\n$RefreshReg$(_c, \"VLEIProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbnRleHRzL1ZMRUlDb250ZXh0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUV3RjtBQTZCeEYsTUFBTUssNEJBQWNKLG9EQUFhQSxDQUE4Qks7QUFFeEQsU0FBU0M7O0lBQ2QsTUFBTUMsVUFBVU4saURBQVVBLENBQUNHO0lBQzNCLElBQUlHLFlBQVlGLFdBQVc7UUFDekIsTUFBTSxJQUFJRyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Q7QUFDVDtHQU5nQkQ7QUFZVCxTQUFTRyxhQUFhLEtBQStCO1FBQS9CLEVBQUVDLFFBQVEsRUFBcUIsR0FBL0I7O0lBQzNCLE1BQU0sQ0FBQ0MsTUFBTUMsUUFBUSxHQUFHViwrQ0FBUUEsQ0FBWTtRQUMxQ1csZUFBZTtRQUNmQyxpQkFBaUI7UUFDakJDLG1CQUFtQjtRQUNuQkMsY0FBYztRQUNkQyxhQUFhO1FBQ2JDLGVBQWU7UUFDZkMsU0FBUztRQUNUQyxTQUFTO1FBQ1RDLGFBQWE7WUFDWEMsVUFBVTtZQUNWQyxZQUFZO1lBQ1pDLE1BQU07WUFDTkMsTUFBTTtRQUNSO1FBQ0FDLE9BQU87SUFDVDtJQUVBLE1BQU1DLGlCQUFpQjtRQUNyQixJQUFJO1lBQ0ZmLFFBQVFnQixDQUFBQSxPQUFTO29CQUFFLEdBQUdBLElBQUk7b0JBQUVGLE9BQU87Z0JBQUs7WUFDeENHLFFBQVFDLEdBQUcsQ0FBQztZQUVaLGtHQUFrRztZQUNsRyxNQUFNQyxhQUFhLE1BQU0sbU5BQU87WUFDaEMsTUFBTUMsY0FBY0QsV0FBV0UsaUJBQWlCO1lBQ2hELE1BQU1DLGVBQWVILFdBQVdJLGNBQWM7WUFDOUMsTUFBTUMsT0FBT0wsV0FBV0ssSUFBSTtZQUU1QixzQ0FBc0M7WUFDdEMsTUFBTUMsaUJBQWlCO2dCQUNyQkMsVUFBVUMsT0FBT0EsQ0FBQ0MsR0FBRyxDQUFDQyw4QkFBOEIsSUFBSTtnQkFDeERDLE1BQU1SO2dCQUNOUyxNQUFNUCxLQUFLUSxHQUFHO2dCQUNkQyxTQUFTTixPQUFPQSxDQUFD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S0FBSyxFQUFFO1lBQ3RDQztRQUNGO0lBQ0YsR0FBRyxFQUFFO0lBRUwsTUFBTXdFLFFBQXlCO1FBQzdCeEY7UUFDQWdCO1FBQ0E2QjtRQUNBMkI7UUFDQWM7SUFDRjtJQUVBLHFCQUNFLDhEQUFDN0YsWUFBWWdHLFFBQVE7UUFBQ0QsT0FBT0E7a0JBQzFCekY7Ozs7OztBQUdQO0lBN1NnQkQ7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29udGV4dHMvVkxFSUNvbnRleHQudHN4PzRjNmUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbi8vIER5bmFtaWMgaW1wb3J0IGZvciB2TEVJIHNlcnZpY2UgdG8gaGFuZGxlIHBvdGVudGlhbCBtb2R1bGUgaXNzdWVzXG5cbmV4cG9ydCBpbnRlcmZhY2UgVkxFSVN0YXRlIHtcbiAgaXNJbml0aWFsaXplZDogYm9vbGVhblxuICB0ZWNoY29ycFNlcnZpY2U6IGFueSB8IG51bGxcbiAgc3VwcGxpZXJjb1NlcnZpY2U6IGFueSB8IG51bGxcbiAgZ2xlaWZTZXJ2aWNlOiBhbnkgfCBudWxsXG4gIHRlY2hjb3JwQUlEOiBzdHJpbmcgfCBudWxsXG4gIHN1cHBsaWVyY29BSUQ6IHN0cmluZyB8IG51bGxcbiAgam9obkFJRDogc3RyaW5nIHwgbnVsbFxuICBqYW5lQUlEOiBzdHJpbmcgfCBudWxsXG4gIGNyZWRlbnRpYWxzOiB7XG4gICAgdGVjaGNvcnA6IGFueVxuICAgIHN1cHBsaWVyY286IGFueVxuICAgIGpvaG46IGFueVxuICAgIGphbmU6IGFueVxuICB9XG4gIGVycm9yOiBzdHJpbmcgfCBudWxsXG59XG5cbmludGVyZmFjZSBWTEVJQ29udGV4dFR5cGUge1xuICB2bGVpOiBWTEVJU3RhdGVcbiAgaW5pdGlhbGl6ZVZMRUk6ICgpID0+IFByb21pc2U8dm9pZD5cbiAgaXNzdWVDcmVkZW50aWFsczogKCkgPT4gUHJvbWlzZTx2b2lkPlxuICB2ZXJpZnlDcmVkZW50aWFsczogKHJvbGU6ICdidXllcicgfCAnc2VsbGVyJykgPT4gUHJvbWlzZTxhbnk+XG4gIGdldENyZWRlbnRpYWxzOiAoYWlkOiBzdHJpbmcpID0+IFByb21pc2U8YW55W10+XG59XG5cbmNvbnN0IFZMRUlDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxWTEVJQ29udGV4dFR5cGUgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZClcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVZMRUkoKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KFZMRUlDb250ZXh0KVxuICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VWTEVJIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBWTEVJUHJvdmlkZXInKVxuICB9XG4gIHJldHVybiBjb250ZXh0XG59XG5cbmludGVyZmFjZSBWTEVJUHJvdmlkZXJQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFZMRUlQcm92aWRlcih7IGNoaWxkcmVuIH06IFZMRUlQcm92aWRlclByb3BzKSB7XG4gIGNvbnN0IFt2bGVpLCBzZXRWbGVpXSA9IHVzZVN0YXRlPFZMRUlTdGF0ZT4oe1xuICAgIGlzSW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICAgIHRlY2hjb3JwU2VydmljZTogbnVsbCxcbiAgICBzdXBwbGllcmNvU2VydmljZTogbnVsbCxcbiAgICBnbGVpZlNlcnZpY2U6IG51bGwsXG4gICAgdGVjaGNvcnBBSUQ6IG51bGwsXG4gICAgc3VwcGxpZXJjb0FJRDogbnVsbCxcbiAgICBqb2huQUlEOiBudWxsLFxuICAgIGphbmVBSUQ6IG51bGwsXG4gICAgY3JlZGVudGlhbHM6IHtcbiAgICAgIHRlY2hjb3JwOiBudWxsLFxuICAgICAgc3VwcGxpZXJjbzogbnVsbCxcbiAgICAgIGpvaG46IG51bGwsXG4gICAgICBqYW5lOiBudWxsXG4gICAgfSxcbiAgICBlcnJvcjogbnVsbCxcbiAgfSlcblxuICBjb25zdCBpbml0aWFsaXplVkxFSSA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgc2V0VmxlaShwcmV2ID0+ICh7IC4uLnByZXYsIGVycm9yOiBudWxsIH0pKVxuICAgICAgY29uc29sZS5sb2coJ/CfmoAgSW5pdGlhbGl6aW5nIHZMRUkgaW5mcmFzdHJ1Y3R1cmUuLi4nKVxuXG4gICAgICAvLyBVc2UgbW9jayBpbXBsZW1lbnRhdGlvbiBmb3Igbm93IChQaGFzZSAyIHdpbGwgdXNlIHJlYWwgaW1wbGVtZW50YXRpb24gd2hlbiBwYWNrYWdlcyBhcmUgc3RhYmxlKVxuICAgICAgY29uc3QgbW9ja01vZHVsZSA9IGF3YWl0IGltcG9ydCgnQC9saWIvbW9jay1zaWduaWZ5LXRzJylcbiAgICAgIGNvbnN0IFZMRUlTZXJ2aWNlID0gbW9ja01vZHVsZS5Nb2NrU2lnbmlmeUNsaWVudFxuICAgICAgY29uc3QgZ2VuZXJhdGVCcmFuID0gbW9ja01vZHVsZS5yYW5kb21QYXNzY29kZVxuICAgICAgY29uc3QgVGllciA9IG1vY2tNb2R1bGUuVGllclxuXG4gICAgICAvLyBDcmVhdGUgS0VSSUEgc2VydmljZSBjb25maWd1cmF0aW9uc1xuICAgICAgY29uc3QgdGVjaGNvcnBDb25maWcgPSB7XG4gICAgICAgIGtlcmlhVXJsOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19LRVJJQV9URUNIQ09SUF9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzkwMScsXG4gICAgICAgIGJyYW46IGdlbmVyYXRlQnJhbigpLFxuICAgICAgICB0aWVyOiBUaWVyLmxvdyxcbiAgICAgICAgYm9vdFVybDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfS0VSSUFfQk9PVF9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzkwMydcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3VwcGxpZXJjb0NvbmZpZyA9IHtcbiAgICAgICAga2VyaWFVcmw6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0tFUklBX1NVUFBMSUVSQ09fVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjM5MDQnLFxuICAgICAgICBicmFuOiBnZW5lcmF0ZUJyYW4oKSxcbiAgICAgICAgdGllcjogVGllci5sb3csXG4gICAgICAgIGJvb3RVcmw6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0tFUklBX0JPT1RfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjM5MDMnXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGdsZWlmQ29uZmlnID0ge1xuICAgICAgICBrZXJpYVVybDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfS0VSSUFfR0xFSUZfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjM5MDYnLFxuICAgICAgICBicmFuOiBnZW5lcmF0ZUJyYW4oKSxcbiAgICAgICAgdGllcjogVGllci5sb3csXG4gICAgICAgIGJvb3RVcmw6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0tFUklBX0JPT1RfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjM5MDMnXG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSBzZXJ2aWNlIGluc3RhbmNlc1xuICAgICAgY29uc3QgdGVjaGNvcnBTZXJ2aWNlID0gbmV3IFZMRUlTZXJ2aWNlKHRlY2hjb3JwQ29uZmlnKVxuICAgICAgY29uc3Qgc3VwcGxpZXJjb1NlcnZpY2UgPSBuZXcgVkxFSVNlcnZpY2Uoc3VwcGxpZXJjb0NvbmZpZylcbiAgICAgIGNvbnN0IGdsZWlmU2VydmljZSA9IG5ldyBWTEVJU2VydmljZShnbGVpZkNvbmZpZylcblxuICAgICAgLy8gSW5pdGlhbGl6ZSBzZXJ2aWNlc1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICB0ZWNoY29ycFNlcnZpY2UuaW5pdGlhbGl6ZSgpLFxuICAgICAgICBzdXBwbGllcmNvU2VydmljZS5pbml0aWFsaXplKCksXG4gICAgICAgIGdsZWlmU2VydmljZS5pbml0aWFsaXplKClcbiAgICAgIF0pXG5cbiAgICAgIHNldFZsZWkocHJldiA9PiAoe1xuICAgICAgICAuLi5wcmV2LFxuICAgICAgICBpc0luaXRpYWxpemVkOiB0cnVlLFxuICAgICAgICB0ZWNoY29ycFNlcnZpY2UsXG4gICAgICAgIHN1cHBsaWVyY29TZXJ2aWNlLFxuICAgICAgICBnbGVpZlNlcnZpY2UsXG4gICAgICB9KSlcblxuICAgICAgY29uc29sZS5sb2coJ+KchSB2TEVJIGluZnJhc3RydWN0dXJlIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseScpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBpbml0aWFsaXplIHZMRUknXG4gICAgICBzZXRWbGVpKHByZXYgPT4gKHsgLi4ucHJldiwgZXJyb3I6IGVycm9yTWVzc2FnZSB9KSlcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCB2TEVJIGluaXRpYWxpemF0aW9uIGZhaWxlZDonLCBlcnJvcilcbiAgICB9XG4gIH1cblxuICBjb25zdCBpc3N1ZUNyZWRlbnRpYWxzID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghdmxlaS5pc0luaXRpYWxpemVkIHx8ICF2bGVpLnRlY2hjb3JwU2VydmljZSB8fCAhdmxlaS5zdXBwbGllcmNvU2VydmljZSB8fCAhdmxlaS5nbGVpZlNlcnZpY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndkxFSSBzZXJ2aWNlcyBub3QgaW5pdGlhbGl6ZWQnKVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+TnCBJc3N1aW5nIHZMRUkgY3JlZGVudGlhbHMuLi4nKVxuXG4gICAgICAvLyBDcmVhdGUgb3JnYW5pemF0aW9uYWwgQUlEc1xuICAgICAgY29uc3QgdGVjaGNvcnBBSUQgPSBhd2FpdCB2bGVpLnRlY2hjb3JwU2VydmljZS5jcmVhdGVPcmdhbml6YXRpb25BSUQoe1xuICAgICAgICBuYW1lOiAnVGVjaENvcnAnLFxuICAgICAgICBsZWk6ICc1MDY3MDBHRTFHMjkzMjVRWDM2MycsXG4gICAgICAgIGxlZ2FsTmFtZTogJ1RlY2hDb3JwIEluYy4nLFxuICAgICAgICBqdXJpc2RpY3Rpb246ICdVUy1ERSdcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHN1cHBsaWVyY29BSUQgPSBhd2FpdCB2bGVpLnN1cHBsaWVyY29TZXJ2aWNlLmNyZWF0ZU9yZ2FuaXphdGlvbkFJRCh7XG4gICAgICAgIG5hbWU6ICdTdXBwbGllckNvJyxcbiAgICAgICAgbGVpOiAnNTQ5MzAwWE9DVVpENEVNS0dZOTYnLFxuICAgICAgICBsZWdhbE5hbWU6ICdTdXBwbGllckNvIExMQycsXG4gICAgICAgIGp1cmlzZGljdGlvbjogJ1VTLUNBJ1xuICAgICAgfSlcblxuICAgICAgLy8gQ3JlYXRlIHBlcnNvbmFsIEFJRHNcbiAgICAgIGNvbnN0IGpvaG5BSUQgPSBhd2FpdCB2bGVpLnRlY2hjb3JwU2VydmljZS5jcmVhdGVQZXJzb25BSUQoe1xuICAgICAgICBuYW1lOiAnSm9obi1DRk8nLFxuICAgICAgICBsZWdhbE5hbWU6ICdKb2huIERvZScsXG4gICAgICAgIHJvbGU6ICdDaGllZiBGaW5hbmNpYWwgT2ZmaWNlcicsXG4gICAgICAgIG9yZ2FuaXphdGlvbkxFSTogJzUwNjcwMEdFMUcyOTMyNVFYMzYzJ1xuICAgICAgfSlcblxuICAgICAgY29uc3QgamFuZUFJRCA9IGF3YWl0IHZsZWkuc3VwcGxpZXJjb1NlcnZpY2UuY3JlYXRlUGVyc29uQUlEKHtcbiAgICAgICAgbmFtZTogJ0phbmUtU2FsZXMnLFxuICAgICAgICBsZWdhbE5hbWU6ICdKYW5lIFNtaXRoJyxcbiAgICAgICAgcm9sZTogJ1NhbGVzIERpcmVjdG9yJyxcbiAgICAgICAgb3JnYW5pemF0aW9uTEVJOiAnNTQ5MzAwWE9DVVpENEVNS0dZOTYnXG4gICAgICB9KVxuXG4gICAgICAvLyBJc3N1ZSBRVkkgY3JlZGVudGlhbHMgKHNpbXVsYXRlZCAtIGluIHJlYWwgaW1wbGVtZW50YXRpb24sIEdMRUlGIHdvdWxkIGlzc3VlIHRoZXNlKVxuICAgICAgY29uc3QgdGVjaGNvcnBRVkkgPSB7XG4gICAgICAgIHNhZDoge1xuICAgICAgICAgIGQ6IGBRVklfJHtEYXRlLm5vdygpfWAsXG4gICAgICAgICAgaTogJ0VJRFVhdmNteUhCc2VOWkFkQUhSM1NGOFFNZlgxa1NKM0N0ME9xUzAtSENXJywgLy8gR0xFSUYgQUlEXG4gICAgICAgICAgYTogeyBpOiB0ZWNoY29ycEFJRCwgTEVJOiAnNTA2NzAwR0UxRzI5MzI1UVgzNjMnLCBsZWdhbE5hbWU6ICdUZWNoQ29ycCBJbmMuJyB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3VwcGxpZXJjb1FWSSA9IHtcbiAgICAgICAgc2FkOiB7XG4gICAgICAgICAgZDogYFFWSV8ke0RhdGUubm93KCkgKyAxfWAsXG4gICAgICAgICAgaTogJ0VJRFVhdmNteUhCc2VOWkFkQUhSM1NGOFFNZlgxa1NKM0N0ME9xUzAtSENXJywgLy8gR0xFSUYgQUlEXG4gICAgICAgICAgYTogeyBpOiBzdXBwbGllcmNvQUlELCBMRUk6ICc1NDkzMDBYT0NVWkQ0RU1LR1k5NicsIGxlZ2FsTmFtZTogJ1N1cHBsaWVyQ28gTExDJyB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSXNzdWUgT09SIGNyZWRlbnRpYWxzXG4gICAgICBjb25zdCBqb2huT09SID0gYXdhaXQgdmxlaS50ZWNoY29ycFNlcnZpY2UuaXNzdWVPT1JDcmVkZW50aWFsKFxuICAgICAgICB0ZWNoY29ycEFJRCxcbiAgICAgICAgam9obkFJRCxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdKb2huLUNGTycsXG4gICAgICAgICAgbGVnYWxOYW1lOiAnSm9obiBEb2UnLFxuICAgICAgICAgIHJvbGU6ICdDaGllZiBGaW5hbmNpYWwgT2ZmaWNlcicsXG4gICAgICAgICAgb3JnYW5pemF0aW9uTEVJOiAnNTA2NzAwR0UxRzI5MzI1UVgzNjMnXG4gICAgICAgIH1cbiAgICAgIClcblxuICAgICAgY29uc3QgamFuZU9PUiA9IGF3YWl0IHZsZWkuc3VwcGxpZXJjb1NlcnZpY2UuaXNzdWVPT1JDcmVkZW50aWFsKFxuICAgICAgICBzdXBwbGllcmNvQUlELFxuICAgICAgICBqYW5lQUlELFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ0phbmUtU2FsZXMnLFxuICAgICAgICAgIGxlZ2FsTmFtZTogJ0phbmUgU21pdGgnLFxuICAgICAgICAgIHJvbGU6ICdTYWxlcyBEaXJlY3RvcicsXG4gICAgICAgICAgb3JnYW5pemF0aW9uTEVJOiAnNTQ5MzAwWE9DVVpENEVNS0dZOTYnXG4gICAgICAgIH1cbiAgICAgIClcblxuICAgICAgLy8gSXNzdWUgRUNSIGNyZWRlbnRpYWxzXG4gICAgICBjb25zdCBqb2huRUNSID0gYXdhaXQgdmxlaS50ZWNoY29ycFNlcnZpY2UuaXNzdWVFQ1JDcmVkZW50aWFsKFxuICAgICAgICB0ZWNoY29ycEFJRCxcbiAgICAgICAgam9obkFJRCxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdKb2huLUNGTycsXG4gICAgICAgICAgbGVnYWxOYW1lOiAnSm9obiBEb2UnLFxuICAgICAgICAgIHJvbGU6ICdQcm9jdXJlbWVudCBNYW5hZ2VyJyxcbiAgICAgICAgICBvcmdhbml6YXRpb25MRUk6ICc1MDY3MDBHRTFHMjkzMjVRWDM2MydcbiAgICAgICAgfSxcbiAgICAgICAgam9obk9PUi5zYWQuZCxcbiAgICAgICAgMTAwMDAwIC8vICQxMDBrIHNwZW5kaW5nIGxpbWl0XG4gICAgICApXG5cbiAgICAgIGNvbnN0IGphbmVFQ1IgPSBhd2FpdCB2bGVpLnN1cHBsaWVyY29TZXJ2aWNlLmlzc3VlRUNSQ3JlZGVudGlhbChcbiAgICAgICAgc3VwcGxpZXJjb0FJRCxcbiAgICAgICAgamFuZUFJRCxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdKYW5lLVNhbGVzJyxcbiAgICAgICAgICBsZWdhbE5hbWU6ICdKYW5lIFNtaXRoJyxcbiAgICAgICAgICByb2xlOiAnQ29udHJhY3QgU2lnbmVyJyxcbiAgICAgICAgICBvcmdhbml6YXRpb25MRUk6ICc1NDkzMDBYT0NVWkQ0RU1LR1k5NidcbiAgICAgICAgfSxcbiAgICAgICAgamFuZU9PUi5zYWQuZCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICA1MDAwMDAgLy8gJDUwMGsgbWF4IGNvbnRyYWN0IHZhbHVlXG4gICAgICApXG5cbiAgICAgIHNldFZsZWkocHJldiA9PiAoe1xuICAgICAgICAuLi5wcmV2LFxuICAgICAgICB0ZWNoY29ycEFJRCxcbiAgICAgICAgc3VwcGxpZXJjb0FJRCxcbiAgICAgICAgam9obkFJRCxcbiAgICAgICAgamFuZUFJRCxcbiAgICAgICAgY3JlZGVudGlhbHM6IHtcbiAgICAgICAgICB0ZWNoY29ycDogeyBxdmk6IHRlY2hjb3JwUVZJIH0sXG4gICAgICAgICAgc3VwcGxpZXJjbzogeyBxdmk6IHN1cHBsaWVyY29RVkkgfSxcbiAgICAgICAgICBqb2huOiB7IG9vcjogam9obk9PUiwgZWNyOiBqb2huRUNSIH0sXG4gICAgICAgICAgamFuZTogeyBvb3I6IGphbmVPT1IsIGVjcjogamFuZUVDUiB9XG4gICAgICAgIH1cbiAgICAgIH0pKVxuXG4gICAgICBjb25zb2xlLmxvZygn4pyFIEFsbCB2TEVJIGNyZWRlbnRpYWxzIGlzc3VlZCBzdWNjZXNzZnVsbHknKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gaXNzdWUgY3JlZGVudGlhbHMnXG4gICAgICBzZXRWbGVpKHByZXYgPT4gKHsgLi4ucHJldiwgZXJyb3I6IGVycm9yTWVzc2FnZSB9KSlcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBDcmVkZW50aWFsIGlzc3VhbmNlIGZhaWxlZDonLCBlcnJvcilcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG5cbiAgY29uc3QgdmVyaWZ5Q3JlZGVudGlhbHMgPSBhc3luYyAocm9sZTogJ2J1eWVyJyB8ICdzZWxsZXInKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICBpZiAoIXZsZWkuaXNJbml0aWFsaXplZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd2TEVJIG5vdCBpbml0aWFsaXplZCcpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNlcnZpY2UgPSByb2xlID09PSAnYnV5ZXInID8gdmxlaS50ZWNoY29ycFNlcnZpY2UgOiB2bGVpLnN1cHBsaWVyY29TZXJ2aWNlXG4gICAgICBjb25zdCBwZXJzb25DcmVkZW50aWFscyA9IHJvbGUgPT09ICdidXllcicgPyB2bGVpLmNyZWRlbnRpYWxzLmpvaG4gOiB2bGVpLmNyZWRlbnRpYWxzLmphbmVcbiAgICAgIGNvbnN0IG9yZ0NyZWRlbnRpYWxzID0gcm9sZSA9PT0gJ2J1eWVyJyA/IHZsZWkuY3JlZGVudGlhbHMudGVjaGNvcnAgOiB2bGVpLmNyZWRlbnRpYWxzLnN1cHBsaWVyY29cblxuICAgICAgaWYgKCFzZXJ2aWNlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndkxFSSBzZXJ2aWNlIG5vdCBhdmFpbGFibGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXBlcnNvbkNyZWRlbnRpYWxzIHx8ICFvcmdDcmVkZW50aWFscykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0NyZWRlbnRpYWxzIG5vdCB5ZXQgaXNzdWVkLCByZXR1cm5pbmcgbW9jayB2ZXJpZmljYXRpb24nKVxuICAgICAgICAvLyBSZXR1cm4gbW9jayB2ZXJpZmljYXRpb24gaWYgY3JlZGVudGlhbHMgYXJlbid0IGF2YWlsYWJsZSB5ZXRcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWxpZDogdHJ1ZSxcbiAgICAgICAgICBvcmdMRUk6IHJvbGUgPT09ICdidXllcicgPyAnNTA2NzAwR0UxRzI5MzI1UVgzNjMnIDogJzU0OTMwMFhPQ1VaRDRFTUtHWTk2JyxcbiAgICAgICAgICBwZXJzb25OYW1lOiByb2xlID09PSAnYnV5ZXInID8gJ0pvaG4gRG9lJyA6ICdKYW5lIFNtaXRoJyxcbiAgICAgICAgICByb2xlOiByb2xlID09PSAnYnV5ZXInID8gJ1Byb2N1cmVtZW50IE1hbmFnZXInIDogJ0NvbnRyYWN0IFNpZ25lcicsXG4gICAgICAgICAgc3BlbmRpbmdMaW1pdDogcm9sZSA9PT0gJ2J1eWVyJyA/IDEwMDAwMCA6IDUwMDAwMCxcbiAgICAgICAgICBtYXhDb250cmFjdFZhbHVlOiByb2xlID09PSAnYnV5ZXInID8gMTAwMDAwIDogNTAwMDAwLFxuICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgIG9yZ05hbWU6IHJvbGUgPT09ICdidXllcicgPyAnVGVjaENvcnAgSW5jLicgOiAnU3VwcGxpZXJDbyBMTEMnLFxuICAgICAgICAgICAgbGVpOiByb2xlID09PSAnYnV5ZXInID8gJzUwNjcwMEdFMUcyOTMyNVFYMzYzJyA6ICc1NDkzMDBYT0NVWkQ0RU1LR1k5NicsXG4gICAgICAgICAgICBwZXJzb25OYW1lOiByb2xlID09PSAnYnV5ZXInID8gJ0pvaG4gRG9lJyA6ICdKYW5lIFNtaXRoJyxcbiAgICAgICAgICAgIHJvbGU6IHJvbGUgPT09ICdidXllcicgPyAnUHJvY3VyZW1lbnQgTWFuYWdlcicgOiAnQ29udHJhY3QgU2lnbmVyJyxcbiAgICAgICAgICAgIHNwZW5kaW5nTGltaXQ6IHJvbGUgPT09ICdidXllcicgPyAxMDAwMDAgOiA1MDAwMDAsXG4gICAgICAgICAgICBtYXhDb250cmFjdFZhbHVlOiByb2xlID09PSAnYnV5ZXInID8gMTAwMDAwIDogNTAwMDAwLFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZXJ2aWNlLnZlcmlmeUNyZWRlbnRpYWxDaGFpbihcbiAgICAgICAgcGVyc29uQ3JlZGVudGlhbHMuZWNyLFxuICAgICAgICBwZXJzb25DcmVkZW50aWFscy5vb3IsXG4gICAgICAgIG9yZ0NyZWRlbnRpYWxzLnF2aVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBDcmVkZW50aWFsIHZlcmlmaWNhdGlvbiBmYWlsZWQ6JywgZXJyb3IpXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGdldENyZWRlbnRpYWxzID0gYXN5bmMgKGFpZDogc3RyaW5nKTogUHJvbWlzZTxhbnlbXT4gPT4ge1xuICAgIGlmICghdmxlaS5pc0luaXRpYWxpemVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZMRUkgbm90IGluaXRpYWxpemVkJylcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgd2hpY2ggc2VydmljZSB0byB1c2UgYmFzZWQgb24gQUlEXG4gICAgbGV0IHNlcnZpY2U6IFZMRUlTZXJ2aWNlIHwgbnVsbCA9IG51bGxcbiAgICBpZiAoYWlkID09PSB2bGVpLnRlY2hjb3JwQUlEKSB7XG4gICAgICBzZXJ2aWNlID0gdmxlaS50ZWNoY29ycFNlcnZpY2VcbiAgICB9IGVsc2UgaWYgKGFpZCA9PT0gdmxlaS5zdXBwbGllcmNvQUlEKSB7XG4gICAgICBzZXJ2aWNlID0gdmxlaS5zdXBwbGllcmNvU2VydmljZVxuICAgIH0gZWxzZSBpZiAoYWlkID09PSB2bGVpLmpvaG5BSUQpIHtcbiAgICAgIHNlcnZpY2UgPSB2bGVpLnRlY2hjb3JwU2VydmljZVxuICAgIH0gZWxzZSBpZiAoYWlkID09PSB2bGVpLmphbmVBSUQpIHtcbiAgICAgIHNlcnZpY2UgPSB2bGVpLnN1cHBsaWVyY29TZXJ2aWNlXG4gICAgfVxuXG4gICAgaWYgKCFzZXJ2aWNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZpY2Ugbm90IGZvdW5kIGZvciBBSUQnKVxuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCBzZXJ2aWNlLmdldENyZWRlbnRpYWxzKGFpZClcbiAgfVxuXG4gIC8vIEF1dG8taW5pdGlhbGl6ZSBvbiBtb3VudFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghdmxlaS5pc0luaXRpYWxpemVkICYmICF2bGVpLmVycm9yKSB7XG4gICAgICBpbml0aWFsaXplVkxFSSgpXG4gICAgfVxuICB9LCBbXSlcblxuICBjb25zdCB2YWx1ZTogVkxFSUNvbnRleHRUeXBlID0ge1xuICAgIHZsZWksXG4gICAgaW5pdGlhbGl6ZVZMRUksXG4gICAgaXNzdWVDcmVkZW50aWFscyxcbiAgICB2ZXJpZnlDcmVkZW50aWFscyxcbiAgICBnZXRDcmVkZW50aWFscyxcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFZMRUlDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9WTEVJQ29udGV4dC5Qcm92aWRlcj5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIlZMRUlDb250ZXh0IiwidW5kZWZpbmVkIiwidXNlVkxFSSIsImNvbnRleHQiLCJFcnJvciIsIlZMRUlQcm92aWRlciIsImNoaWxkcmVuIiwidmxlaSIsInNldFZsZWkiLCJpc0luaXRpYWxpemVkIiwidGVjaGNvcnBTZXJ2aWNlIiwic3VwcGxpZXJjb1NlcnZpY2UiLCJnbGVpZlNlcnZpY2UiLCJ0ZWNoY29ycEFJRCIsInN1cHBsaWVyY29BSUQiLCJqb2huQUlEIiwiamFuZUFJRCIsImNyZWRlbnRpYWxzIiwidGVjaGNvcnAiLCJzdXBwbGllcmNvIiwiam9obiIsImphbmUiLCJlcnJvciIsImluaXRpYWxpemVWTEVJIiwicHJldiIsImNvbnNvbGUiLCJsb2ciLCJtb2NrTW9kdWxlIiwiVkxFSVNlcnZpY2UiLCJNb2NrU2lnbmlmeUNsaWVudCIsImdlbmVyYXRlQnJhbiIsInJhbmRvbVBhc3Njb2RlIiwiVGllciIsInRlY2hjb3JwQ29uZmlnIiwia2VyaWFVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfS0VSSUFfVEVDSENPUlBfVVJMIiwiYnJhbiIsInRpZXIiLCJsb3ciLCJib290VXJsIiwiTkVYVF9QVUJMSUNfS0VSSUFfQk9PVF9VUkwiLCJzdXBwbGllcmNvQ29uZmlnIiwiTkVYVF9QVUJMSUNfS0VSSUFfU1VQUExJRVJDT19VUkwiLCJnbGVpZkNvbmZpZyIsIk5FWFRfUFVCTElDX0tFUklBX0dMRUlGX1VSTCIsIlByb21pc2UiLCJhbGwiLCJpbml0aWFsaXplIiwiZXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsImlzc3VlQ3JlZGVudGlhbHMiLCJjcmVhdGVPcmdhbml6YXRpb25BSUQiLCJuYW1lIiwibGVpIiwibGVnYWxOYW1lIiwianVyaXNkaWN0aW9uIiwiY3JlYXRlUGVyc29uQUlEIiwicm9sZSIsIm9yZ2FuaXphdGlvbkxFSSIsInRlY2hjb3JwUVZJIiwic2FkIiwiZCIsIkRhdGUiLCJub3ciLCJpIiwiYSIsIkxFSSIsInN1cHBsaWVyY29RVkkiLCJqb2huT09SIiwiaXNzdWVPT1JDcmVkZW50aWFsIiwiamFuZU9PUiIsImpvaG5FQ1IiLCJpc3N1ZUVDUkNyZWRlbnRpYWwiLCJqYW5lRUNSIiwicXZpIiwib29yIiwiZWNyIiwidmVyaWZ5Q3JlZGVudGlhbHMiLCJzZXJ2aWNlIiwicGVyc29uQ3JlZGVudGlhbHMiLCJvcmdDcmVkZW50aWFscyIsIndhcm4iLCJ2YWxpZCIsIm9yZ0xFSSIsInBlcnNvbk5hbWUiLCJzcGVuZGluZ0xpbWl0IiwibWF4Q29udHJhY3RWYWx1ZSIsImRldGFpbHMiLCJvcmdOYW1lIiwicmVzdWx0IiwidmVyaWZ5Q3JlZGVudGlhbENoYWluIiwiZ2V0Q3JlZGVudGlhbHMiLCJhaWQiLCJ2YWx1ZSIsIlByb3ZpZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contexts/VLEIContext.tsx\n"));

/***/ })

});