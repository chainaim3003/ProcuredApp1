"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./contexts/VLEIContext.tsx":
/*!**********************************!*\
  !*** ./contexts/VLEIContext.tsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VLEIProvider: function() { return /* binding */ VLEIProvider; },\n/* harmony export */   useVLEI: function() { return /* binding */ useVLEI; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/* __next_internal_client_entry_do_not_use__ useVLEI,VLEIProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst VLEIContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction useVLEI() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(VLEIContext);\n    if (context === undefined) {\n        throw new Error(\"useVLEI must be used within a VLEIProvider\");\n    }\n    return context;\n}\n_s(useVLEI, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction VLEIProvider(param) {\n    let { children } = param;\n    _s1();\n    const [vlei, setVlei] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isInitialized: false,\n        techcorpService: null,\n        suppliercoService: null,\n        gleifService: null,\n        techcorpAID: null,\n        suppliercoAID: null,\n        johnAID: null,\n        janeAID: null,\n        credentials: {\n            techcorp: null,\n            supplierco: null,\n            john: null,\n            jane: null\n        },\n        error: null\n    });\n    const initializeVLEI = async ()=>{\n        try {\n            setVlei((prev)=>({\n                    ...prev,\n                    error: null\n                }));\n            console.log(\"\\uD83D\\uDE80 Initializing vLEI infrastructure...\");\n            // Use mock implementation for now (Phase 2 will use real implementation when packages are stable)\n            const mockModule = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_lib_mock-signify-ts_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/lib/mock-signify-ts */ \"(app-pages-browser)/./lib/mock-signify-ts.ts\"));\n            const VLEIService = mockModule.MockSignifyClient;\n            const generateBran = mockModule.randomPasscode;\n            const Tier = mockModule.Tier;\n            // Create KERIA service configurations\n            const techcorpConfig = {\n                keriaUrl: process.env.NEXT_PUBLIC_KERIA_TECHCORP_URL || \"http://localhost:3901\",\n                bran: generateBran(),\n                tier: Tier.low,\n                bootUrl: process.env.NEXT_PUBLIC_KERIA_BOOT_URL || \"http://localhost:3903\"\n            };\n            const suppliercoConfig = {\n                keriaUrl: process.env.NEXT_PUBLIC_KERIA_SUPPLIERCO_URL || \"http://localhost:3904\",\n                bran: generateBran(),\n                tier: Tier.low,\n                bootUrl: process.env.NEXT_PUBLIC_KERIA_BOOT_URL || \"http://localhost:3903\"\n            };\n            const gleifConfig = {\n                keriaUrl: process.env.NEXT_PUBLIC_KERIA_GLEIF_URL || \"http://localhost:3906\",\n                bran: generateBran(),\n                tier: Tier.low,\n                bootUrl: process.env.NEXT_PUBLIC_KERIA_BOOT_URL || \"http://localhost:3903\"\n            };\n            // Create service instances\n            const techcorpService = new VLEIService(techcorpConfig);\n            const suppliercoService = new VLEIService(suppliercoConfig);\n            const gleifService = new VLEIService(gleifConfig);\n            // Initialize services\n            await Promise.all([\n                techcorpService.initialize(),\n                suppliercoService.initialize(),\n                gleifService.initialize()\n            ]);\n            setVlei((prev)=>({\n                    ...prev,\n                    isInitialized: true,\n                    techcorpService,\n                    suppliercoService,\n                    gleifService\n                }));\n            console.log(\"✅ vLEI infrastructure initialized successfully\");\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to initialize vLEI\";\n            setVlei((prev)=>({\n                    ...prev,\n                    error: errorMessage\n                }));\n            console.error(\"❌ vLEI initialization failed:\", error);\n        }\n    };\n    const issueCredentials = async ()=>{\n        if (!vlei.isInitialized || !vlei.techcorpService || !vlei.suppliercoService || !vlei.gleifService) {\n            throw new Error(\"vLEI services not initialized\");\n        }\n        try {\n            console.log(\"\\uD83D\\uDCDC Issuing vLEI credentials...\");\n            // Create organizational AIDs\n            const techcorpAID = await vlei.techcorpService.createOrganizationAID({\n                name: \"TechCorp\",\n                lei: \"506700GE1G29325QX363\",\n                legalName: \"TechCorp Inc.\",\n                jurisdiction: \"US-DE\"\n            });\n            const suppliercoAID = await vlei.suppliercoService.createOrganizationAID({\n                name: \"SupplierCo\",\n                lei: \"549300XOCUZD4EMKGY96\",\n                legalName: \"SupplierCo LLC\",\n                jurisdiction: \"US-CA\"\n            });\n            // Create personal AIDs\n            const johnAID = await vlei.techcorpService.createPersonAID({\n                name: \"John-CFO\",\n                legalName: \"John Doe\",\n                role: \"Chief Financial Officer\",\n                organizationLEI: \"506700GE1G29325QX363\"\n            });\n            const janeAID = await vlei.suppliercoService.createPersonAID({\n                name: \"Jane-Sales\",\n                legalName: \"Jane Smith\",\n                role: \"Sales Director\",\n                organizationLEI: \"549300XOCUZD4EMKGY96\"\n            });\n            // Issue QVI credentials (simulated - in real implementation, GLEIF would issue these)\n            const techcorpQVI = {\n                sad: {\n                    d: \"QVI_\".concat(Date.now()),\n                    i: \"EIDUavcmyHBseNZAdAHR3SF8QMfX1kSJ3Ct0OqS0-HCW\",\n                    a: {\n                        i: techcorpAID,\n                        LEI: \"506700GE1G29325QX363\",\n                        legalName: \"TechCorp Inc.\"\n                    }\n                }\n            };\n            const suppliercoQVI = {\n                sad: {\n                    d: \"QVI_\".concat(Date.now() + 1),\n                    i: \"EIDUavcmyHBseNZAdAHR3SF8QMfX1kSJ3Ct0OqS0-HCW\",\n                    a: {\n                        i: suppliercoAID,\n                        LEI: \"549300XOCUZD4EMKGY96\",\n                        legalName: \"SupplierCo LLC\"\n                    }\n                }\n            };\n            // Issue OOR credentials\n            const johnOOR = await vlei.techcorpService.issueOORCredential(techcorpAID, johnAID, {\n                name: \"John-CFO\",\n                legalName: \"John Doe\",\n                role: \"Chief Financial Officer\",\n                organizationLEI: \"506700GE1G29325QX363\"\n            });\n            const janeOOR = await vlei.suppliercoService.issueOORCredential(suppliercoAID, janeAID, {\n                name: \"Jane-Sales\",\n                legalName: \"Jane Smith\",\n                role: \"Sales Director\",\n                organizationLEI: \"549300XOCUZD4EMKGY96\"\n            });\n            // Issue ECR credentials\n            const johnECR = await vlei.techcorpService.issueECRCredential(techcorpAID, johnAID, {\n                name: \"John-CFO\",\n                legalName: \"John Doe\",\n                role: \"Procurement Manager\",\n                organizationLEI: \"506700GE1G29325QX363\"\n            }, johnOOR.sad.d, 100000 // $100k spending limit\n            );\n            const janeECR = await vlei.suppliercoService.issueECRCredential(suppliercoAID, janeAID, {\n                name: \"Jane-Sales\",\n                legalName: \"Jane Smith\",\n                role: \"Contract Signer\",\n                organizationLEI: \"549300XOCUZD4EMKGY96\"\n            }, janeOOR.sad.d, undefined, 500000 // $500k max contract value\n            );\n            setVlei((prev)=>({\n                    ...prev,\n                    techcorpAID,\n                    suppliercoAID,\n                    johnAID,\n                    janeAID,\n                    credentials: {\n                        techcorp: {\n                            qvi: techcorpQVI\n                        },\n                        supplierco: {\n                            qvi: suppliercoQVI\n                        },\n                        john: {\n                            oor: johnOOR,\n                            ecr: johnECR\n                        },\n                        jane: {\n                            oor: janeOOR,\n                            ecr: janeECR\n                        }\n                    }\n                }));\n            console.log(\"✅ All vLEI credentials issued successfully\");\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to issue credentials\";\n            setVlei((prev)=>({\n                    ...prev,\n                    error: errorMessage\n                }));\n            console.error(\"❌ Credential issuance failed:\", error);\n            throw error;\n        }\n    };\n    const verifyCredentials = async (role)=>{\n        if (!vlei.isInitialized) {\n            throw new Error(\"vLEI not initialized\");\n        }\n        try {\n            const service = role === \"buyer\" ? vlei.techcorpService : vlei.suppliercoService;\n            const personCredentials = role === \"buyer\" ? vlei.credentials.john : vlei.credentials.jane;\n            const orgCredentials = role === \"buyer\" ? vlei.credentials.techcorp : vlei.credentials.supplierco;\n            if (!service) {\n                throw new Error(\"vLEI service not available\");\n            }\n            if (!personCredentials || !orgCredentials) {\n                console.warn(\"Credentials not yet issued, returning mock verification\");\n                // Return mock verification if credentials aren't available yet\n                return {\n                    valid: true,\n                    orgLEI: role === \"buyer\" ? \"506700GE1G29325QX363\" : \"549300XOCUZD4EMKGY96\",\n                    personName: role === \"buyer\" ? \"John Doe\" : \"Jane Smith\",\n                    role: role === \"buyer\" ? \"Procurement Manager\" : \"Contract Signer\",\n                    spendingLimit: role === \"buyer\" ? 100000 : 500000,\n                    maxContractValue: role === \"buyer\" ? 100000 : 500000,\n                    details: {\n                        orgName: role === \"buyer\" ? \"TechCorp Inc.\" : \"SupplierCo LLC\",\n                        lei: role === \"buyer\" ? \"506700GE1G29325QX363\" : \"549300XOCUZD4EMKGY96\",\n                        personName: role === \"buyer\" ? \"John Doe\" : \"Jane Smith\",\n                        role: role === \"buyer\" ? \"Procurement Manager\" : \"Contract Signer\",\n                        spendingLimit: role === \"buyer\" ? 100000 : 500000,\n                        maxContractValue: role === \"buyer\" ? 100000 : 500000\n                    }\n                };\n            }\n            const result = await service.verifyCredentialChain(personCredentials.ecr, personCredentials.oor, orgCredentials.qvi);\n            return result;\n        } catch (error) {\n            console.error(\"❌ Credential verification failed:\", error);\n            throw error;\n        }\n    };\n    const getCredentials = async (aid)=>{\n        if (!vlei.isInitialized) {\n            throw new Error(\"vLEI not initialized\");\n        }\n        // Determine which service to use based on AID\n        let service = null;\n        if (aid === vlei.techcorpAID) {\n            service = vlei.techcorpService;\n        } else if (aid === vlei.suppliercoAID) {\n            service = vlei.suppliercoService;\n        } else if (aid === vlei.johnAID) {\n            service = vlei.techcorpService;\n        } else if (aid === vlei.janeAID) {\n            service = vlei.suppliercoService;\n        }\n        if (!service) {\n            throw new Error(\"Service not found for AID\");\n        }\n        return await service.getCredentials(aid);\n    };\n    // Auto-initialize on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!vlei.isInitialized && !vlei.error) {\n            initializeVLEI();\n        }\n    }, []);\n    const refreshCredentials = async (role)=>{\n        if (!vlei.isInitialized) {\n            throw new Error(\"vLEI not initialized\");\n        }\n        try {\n            return await verifyCredentials(role);\n        } catch (error) {\n            console.error(\"Failed to refresh credentials:\", error);\n            throw error;\n        }\n    };\n    const value = {\n        vlei,\n        initializeVLEI,\n        issueCredentials,\n        verifyCredentials,\n        getCredentials,\n        refreshCredentials\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(VLEIContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/amanpal/Desktop/Stellar-Smart Contract-Wallets/contexts/VLEIContext.tsx\",\n        lineNumber: 357,\n        columnNumber: 5\n    }, this);\n}\n_s1(VLEIProvider, \"eeXGXTbzcAp1K4p0MD3nQLncu5E=\");\n_c = VLEIProvider;\nvar _c;\n$RefreshReg$(_c, \"VLEIProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contexts/VLEIContext.tsx\n"));

/***/ })

});