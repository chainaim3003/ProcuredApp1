"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_mock-signify-ts_ts"],{

/***/ "(app-pages-browser)/./lib/mock-signify-ts.ts":
/*!********************************!*\
  !*** ./lib/mock-signify-ts.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockSignifyClient: function() { return /* binding */ MockSignifyClient; },\n/* harmony export */   Tier: function() { return /* binding */ Tier; },\n/* harmony export */   randomPasscode: function() { return /* binding */ randomPasscode; },\n/* harmony export */   ready: function() { return /* binding */ ready; }\n/* harmony export */ });\n// Mock Signify-TS implementation for Phase 1\n// In Phase 2, this will be replaced with the real signify-ts package\nvar Tier;\n(function(Tier) {\n    Tier[\"low\"] = \"low\";\n    Tier[\"medium\"] = \"medium\";\n    Tier[\"high\"] = \"high\";\n})(Tier || (Tier = {}));\nclass MockSignifyClient {\n    async initialize() {\n        console.log(\"\\uD83D\\uDE80 Mock KERIA initialization process\");\n        await this.boot();\n        await this.connect();\n    }\n    async boot() {\n        console.log(\"\\uD83D\\uDE80 Mock KERIA boot process\");\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n    }\n    async connect() {\n        console.log(\"\\uD83D\\uDD17 Mock KERIA connection established\");\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n    }\n    identifiers() {\n        return {\n            async create (name, options) {\n                console.log(\"\\uD83D\\uDCDD Creating mock identifier: \".concat(name));\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                return {\n                    async op () {\n                        console.log(\"⏳ Mock operation for identifier: \".concat(name));\n                        await new Promise((resolve)=>setTimeout(resolve, 500));\n                        return {\n                            name,\n                            status: \"success\"\n                        };\n                    }\n                };\n            },\n            async get (name) {\n                console.log(\"\\uD83D\\uDD0D Retrieving mock identifier: \".concat(name));\n                await new Promise((resolve)=>setTimeout(resolve, 300));\n                return {\n                    prefix: \"E\".concat(Math.random().toString(36).substring(2, 15).toUpperCase())\n                };\n            }\n        };\n    }\n    credentials() {\n        return {\n            async issue (issuer, issuee, schema, data, edges) {\n                console.log(\"\\uD83D\\uDCDC Issuing mock credential: \".concat(schema));\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                return {\n                    sad: {\n                        d: \"SAID_\".concat(Math.random().toString(36).substring(2, 15)),\n                        i: issuer,\n                        a: {\n                            i: issuee,\n                            ...data\n                        },\n                        e: edges\n                    }\n                };\n            },\n            async verify (credential) {\n                console.log(\"✅ Mock credential verification\");\n                await new Promise((resolve)=>setTimeout(resolve, 500));\n                return true // Mock always returns valid\n                ;\n            },\n            async list (aid) {\n                console.log(\"\\uD83D\\uDCCB Listing mock credentials for: \".concat(aid));\n                await new Promise((resolve)=>setTimeout(resolve, 300));\n                return [] // Mock returns empty list\n                ;\n            }\n        };\n    }\n    operations() {\n        return {\n            async wait (op) {\n                console.log(\"⏳ Waiting for mock operation to complete\");\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n            }\n        };\n    }\n    // Additional methods for VLEI service compatibility\n    async createOrganizationAID(orgInfo) {\n        console.log(\"\\uD83C\\uDFE2 Creating mock organizational AID for \".concat(orgInfo.name, \"...\"));\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        const aid = \"E\".concat(Math.random().toString(36).substring(2, 15).toUpperCase());\n        console.log(\"✅ Mock organizational AID created: \".concat(aid));\n        return aid;\n    }\n    async createPersonAID(personInfo) {\n        console.log(\"\\uD83D\\uDC64 Creating mock personal AID for \".concat(personInfo.name, \"...\"));\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        const aid = \"E\".concat(Math.random().toString(36).substring(2, 15).toUpperCase());\n        console.log(\"✅ Mock personal AID created: \".concat(aid));\n        return aid;\n    }\n    async issueOORCredential(orgAid, personAid, personInfo) {\n        console.log(\"\\uD83D\\uDCDC Issuing mock OOR credential for \".concat(personInfo.name, \"...\"));\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        return {\n            sad: {\n                d: \"OOR_\".concat(Date.now()),\n                i: orgAid,\n                a: {\n                    i: personAid,\n                    ...personInfo\n                }\n            }\n        };\n    }\n    async issueECRCredential(orgAid, personAid, personInfo, oorCredentialSAID, spendingLimit, maxContractValue) {\n        console.log(\"\\uD83D\\uDCDC Issuing mock ECR credential for \".concat(personInfo.name, \"...\"));\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        return {\n            sad: {\n                d: \"ECR_\".concat(Date.now()),\n                i: orgAid,\n                a: {\n                    i: personAid,\n                    ...personInfo,\n                    spendingLimit,\n                    maxContractValue\n                },\n                e: {\n                    auth: oorCredentialSAID\n                }\n            }\n        };\n    }\n    async verifyCredentialChain(ecrCredential, oorCredential, qviCredential) {\n        console.log(\"\\uD83D\\uDD0D Mock credential chain verification\");\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n        return {\n            valid: true,\n            orgLEI: qviCredential.sad.a.LEI || \"506700GE1G29325QX363\",\n            personName: ecrCredential.sad.a.personLegalName || \"John Doe\",\n            role: ecrCredential.sad.a.engagementContextRole || \"Procurement Manager\",\n            spendingLimit: ecrCredential.sad.a.spendingLimit || 100000,\n            maxContractValue: ecrCredential.sad.a.maxContractValue || 500000,\n            details: {\n                orgName: qviCredential.sad.a.legalName || \"TechCorp Inc.\",\n                lei: qviCredential.sad.a.LEI || \"506700GE1G29325QX363\",\n                personName: ecrCredential.sad.a.personLegalName || \"John Doe\",\n                role: ecrCredential.sad.a.engagementContextRole || \"Procurement Manager\",\n                spendingLimit: ecrCredential.sad.a.spendingLimit || 100000,\n                maxContractValue: ecrCredential.sad.a.maxContractValue || 500000\n            }\n        };\n    }\n    constructor(url, bran, tier, bootUrl){\n        this.url = url;\n        this.bran = bran;\n        this.tier = tier;\n    }\n}\nfunction randomPasscode() {\n    return Math.random().toString(36).substring(2, 15);\n}\nasync function ready() {\n    console.log(\"\\uD83C\\uDFAF Mock Signify-TS ready\");\n    await new Promise((resolve)=>setTimeout(resolve, 100));\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/mock-signify-ts.ts\n"));

/***/ })

}]);