"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_mock-passkey-kit_ts"],{

/***/ "(app-pages-browser)/./lib/mock-passkey-kit.ts":
/*!*********************************!*\
  !*** ./lib/mock-passkey-kit.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PasskeyKit: function() { return /* binding */ PasskeyKit; }\n/* harmony export */ });\n// Mock Passkey-Kit implementation for Phase 1\n// In Phase 2, this will be replaced with the real passkey-kit package\nclass PasskeyKit {\n    async connectWallet(options) {\n        // Simulate passkey authentication delay\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        // Generate mock wallet address\n        this.address = \"G\".concat(Math.random().toString(36).substring(2, 15).toUpperCase());\n        this.contractId = \"C\".concat(Math.random().toString(36).substring(2, 15).toUpperCase());\n        console.log(\"\\uD83D\\uDD10 Mock Passkey authentication for: \".concat(options.name));\n        console.log(\"\\uD83D\\uDCCD Wallet Address: \".concat(this.address));\n        console.log(\"\\uD83D\\uDCC4 Contract ID: \".concat(this.contractId));\n        return this.contractId;\n    }\n    async createWallet(options) {\n        // Simulate wallet creation delay\n        await new Promise((resolve)=>setTimeout(resolve, 1500));\n        // Generate mock wallet address\n        this.address = \"G\".concat(Math.random().toString(36).substring(2, 15).toUpperCase());\n        this.contractId = \"C\".concat(Math.random().toString(36).substring(2, 15).toUpperCase());\n        console.log(\"\\uD83C\\uDD95 Mock wallet created for: \".concat(options.name));\n        console.log(\"\\uD83D\\uDCCD Wallet Address: \".concat(this.address));\n        console.log(\"\\uD83D\\uDCC4 Contract ID: \".concat(this.contractId));\n        return this.contractId;\n    }\n    getAddress() {\n        if (!this.address) {\n            throw new Error(\"Wallet not connected\");\n        }\n        return this.address;\n    }\n    getContractId() {\n        if (!this.contractId) {\n            throw new Error(\"Wallet not connected\");\n        }\n        return this.contractId;\n    }\n    async buildTransaction(params) {\n        // Mock transaction building\n        console.log(\"\\uD83D\\uDD28 Building mock transaction:\", params);\n        return {\n            id: \"tx_\".concat(Math.random().toString(36).substring(2, 15)),\n            ...params\n        };\n    }\n    async signTransaction(tx) {\n        // Simulate passkey signing delay\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n        console.log(\"✍️ Mock passkey signature applied\");\n        return {\n            ...tx,\n            signature: \"sig_\".concat(Math.random().toString(36).substring(2, 15))\n        };\n    }\n    async submitTransaction(signedTx) {\n        // Simulate blockchain submission delay\n        await new Promise((resolve)=>setTimeout(resolve, 2000));\n        console.log(\"\\uD83D\\uDCE4 Mock transaction submitted to blockchain\");\n        return {\n            hash: \"hash_\".concat(Math.random().toString(36).substring(2, 15)),\n            status: \"success\",\n            ledger: Math.floor(Math.random() * 1000000) + 1000000\n        };\n    }\n    disconnect() {\n        console.log(\"\\uD83D\\uDD0C Mock passkey wallet disconnected\");\n        // Reset the wallet state\n        this.walletAddress = null;\n        this.contractId = null;\n    }\n    async executeTransaction(params) {\n        console.log(\"⚡ Mock transaction execution:\", params);\n        // Simulate transaction execution delay\n        await new Promise((resolve)=>setTimeout(resolve, 1500));\n        // Simulate passkey authentication\n        console.log(\"\\uD83D\\uDD10 Mock passkey authentication for transaction\");\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        console.log(\"✅ Mock transaction executed successfully\");\n        return {\n            hash: \"tx_\".concat(Math.random().toString(36).substring(2, 15)),\n            status: \"success\",\n            ledger: Math.floor(Math.random() * 1000000) + 1000000\n        };\n    }\n    async getAccountInfo() {\n        console.log(\"\\uD83D\\uDCCA Mock account info requested\");\n        // Simulate API call delay\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n        return {\n            address: this.walletAddress,\n            contractId: this.contractId,\n            balance: {\n                USDC: \"1000000000\",\n                XLM: \"10000000000\" // 1000 XLM (7 decimals)\n            },\n            sequence: Math.floor(Math.random() * 1000000) + 1000000,\n            lastModified: Date.now()\n        };\n    }\n    constructor(config){\n        this.address = null;\n        this.contractId = null;\n        this.config = config;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/mock-passkey-kit.ts\n"));

/***/ })

}]);