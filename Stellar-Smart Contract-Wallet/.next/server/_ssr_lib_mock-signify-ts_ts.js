"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_mock-signify-ts_ts";
exports.ids = ["_ssr_lib_mock-signify-ts_ts"];
exports.modules = {

/***/ "(ssr)/./lib/mock-signify-ts.ts":
/*!********************************!*\
  !*** ./lib/mock-signify-ts.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockSignifyClient: () => (/* binding */ MockSignifyClient),\n/* harmony export */   Tier: () => (/* binding */ Tier),\n/* harmony export */   randomPasscode: () => (/* binding */ randomPasscode),\n/* harmony export */   ready: () => (/* binding */ ready)\n/* harmony export */ });\n// Mock Signify-TS implementation for Phase 1\n// In Phase 2, this will be replaced with the real signify-ts package\nvar Tier;\n(function(Tier) {\n    Tier[\"low\"] = \"low\";\n    Tier[\"medium\"] = \"medium\";\n    Tier[\"high\"] = \"high\";\n})(Tier || (Tier = {}));\nclass MockSignifyClient {\n    constructor(url, bran, tier, bootUrl){\n        this.url = url;\n        this.bran = bran;\n        this.tier = tier;\n    }\n    async initialize() {\n        console.log(\"\\uD83D\\uDE80 Mock KERIA initialization process\");\n        await this.boot();\n        await this.connect();\n    }\n    async boot() {\n        console.log(\"\\uD83D\\uDE80 Mock KERIA boot process\");\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n    }\n    async connect() {\n        console.log(\"\\uD83D\\uDD17 Mock KERIA connection established\");\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n    }\n    identifiers() {\n        return {\n            async create (name, options) {\n                console.log(`📝 Creating mock identifier: ${name}`);\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                return {\n                    async op () {\n                        console.log(`⏳ Mock operation for identifier: ${name}`);\n                        await new Promise((resolve)=>setTimeout(resolve, 500));\n                        return {\n                            name,\n                            status: \"success\"\n                        };\n                    }\n                };\n            },\n            async get (name) {\n                console.log(`🔍 Retrieving mock identifier: ${name}`);\n                await new Promise((resolve)=>setTimeout(resolve, 300));\n                return {\n                    prefix: `E${Math.random().toString(36).substring(2, 15).toUpperCase()}`\n                };\n            }\n        };\n    }\n    credentials() {\n        return {\n            async issue (issuer, issuee, schema, data, edges) {\n                console.log(`📜 Issuing mock credential: ${schema}`);\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                return {\n                    sad: {\n                        d: `SAID_${Math.random().toString(36).substring(2, 15)}`,\n                        i: issuer,\n                        a: {\n                            i: issuee,\n                            ...data\n                        },\n                        e: edges\n                    }\n                };\n            },\n            async verify (credential) {\n                console.log(\"✅ Mock credential verification\");\n                await new Promise((resolve)=>setTimeout(resolve, 500));\n                return true // Mock always returns valid\n                ;\n            },\n            async list (aid) {\n                console.log(`📋 Listing mock credentials for: ${aid}`);\n                await new Promise((resolve)=>setTimeout(resolve, 300));\n                return [] // Mock returns empty list\n                ;\n            }\n        };\n    }\n    operations() {\n        return {\n            async wait (op) {\n                console.log(\"⏳ Waiting for mock operation to complete\");\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n            }\n        };\n    }\n    // Additional methods for VLEI service compatibility\n    async createOrganizationAID(orgInfo) {\n        console.log(`🏢 Creating mock organizational AID for ${orgInfo.name}...`);\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        const aid = `E${Math.random().toString(36).substring(2, 15).toUpperCase()}`;\n        console.log(`✅ Mock organizational AID created: ${aid}`);\n        return aid;\n    }\n    async createPersonAID(personInfo) {\n        console.log(`👤 Creating mock personal AID for ${personInfo.name}...`);\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        const aid = `E${Math.random().toString(36).substring(2, 15).toUpperCase()}`;\n        console.log(`✅ Mock personal AID created: ${aid}`);\n        return aid;\n    }\n    async issueOORCredential(orgAid, personAid, personInfo) {\n        console.log(`📜 Issuing mock OOR credential for ${personInfo.name}...`);\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        return {\n            sad: {\n                d: `OOR_${Date.now()}`,\n                i: orgAid,\n                a: {\n                    i: personAid,\n                    ...personInfo\n                }\n            }\n        };\n    }\n    async issueECRCredential(orgAid, personAid, personInfo, oorCredentialSAID, spendingLimit, maxContractValue) {\n        console.log(`📜 Issuing mock ECR credential for ${personInfo.name}...`);\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        return {\n            sad: {\n                d: `ECR_${Date.now()}`,\n                i: orgAid,\n                a: {\n                    i: personAid,\n                    ...personInfo,\n                    spendingLimit,\n                    maxContractValue\n                },\n                e: {\n                    auth: oorCredentialSAID\n                }\n            }\n        };\n    }\n    async verifyCredentialChain(ecrCredential, oorCredential, qviCredential) {\n        console.log(\"\\uD83D\\uDD0D Mock credential chain verification\");\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n        return {\n            valid: true,\n            orgLEI: qviCredential.sad.a.LEI || \"506700GE1G29325QX363\",\n            personName: ecrCredential.sad.a.personLegalName || \"John Doe\",\n            role: ecrCredential.sad.a.engagementContextRole || \"Procurement Manager\",\n            spendingLimit: ecrCredential.sad.a.spendingLimit || 100000,\n            maxContractValue: ecrCredential.sad.a.maxContractValue || 500000,\n            details: {\n                orgName: qviCredential.sad.a.legalName || \"TechCorp Inc.\",\n                lei: qviCredential.sad.a.LEI || \"506700GE1G29325QX363\",\n                personName: ecrCredential.sad.a.personLegalName || \"John Doe\",\n                role: ecrCredential.sad.a.engagementContextRole || \"Procurement Manager\",\n                spendingLimit: ecrCredential.sad.a.spendingLimit || 100000,\n                maxContractValue: ecrCredential.sad.a.maxContractValue || 500000\n            }\n        };\n    }\n}\nfunction randomPasscode() {\n    return Math.random().toString(36).substring(2, 15);\n}\nasync function ready() {\n    console.log(\"\\uD83C\\uDFAF Mock Signify-TS ready\");\n    await new Promise((resolve)=>setTimeout(resolve, 100));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/mock-signify-ts.ts\n");

/***/ })

};
;