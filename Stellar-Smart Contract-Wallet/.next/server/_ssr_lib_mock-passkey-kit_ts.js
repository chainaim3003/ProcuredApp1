"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_mock-passkey-kit_ts";
exports.ids = ["_ssr_lib_mock-passkey-kit_ts"];
exports.modules = {

/***/ "(ssr)/./lib/mock-passkey-kit.ts":
/*!*********************************!*\
  !*** ./lib/mock-passkey-kit.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PasskeyKit: () => (/* binding */ PasskeyKit)\n/* harmony export */ });\n// Mock Passkey-Kit implementation for Phase 1\n// In Phase 2, this will be replaced with the real passkey-kit package\nclass PasskeyKit {\n    constructor(config){\n        this.address = null;\n        this.contractId = null;\n        this.config = config;\n    }\n    async connectWallet(options) {\n        // Simulate passkey authentication delay\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        // Generate mock wallet address\n        this.address = `G${Math.random().toString(36).substring(2, 15).toUpperCase()}`;\n        this.contractId = `C${Math.random().toString(36).substring(2, 15).toUpperCase()}`;\n        console.log(`🔐 Mock Passkey authentication for: ${options.name}`);\n        console.log(`📍 Wallet Address: ${this.address}`);\n        console.log(`📄 Contract ID: ${this.contractId}`);\n        return this.contractId;\n    }\n    async createWallet(options) {\n        // Simulate wallet creation delay\n        await new Promise((resolve)=>setTimeout(resolve, 1500));\n        // Generate mock wallet address\n        this.address = `G${Math.random().toString(36).substring(2, 15).toUpperCase()}`;\n        this.contractId = `C${Math.random().toString(36).substring(2, 15).toUpperCase()}`;\n        console.log(`🆕 Mock wallet created for: ${options.name}`);\n        console.log(`📍 Wallet Address: ${this.address}`);\n        console.log(`📄 Contract ID: ${this.contractId}`);\n        return this.contractId;\n    }\n    getAddress() {\n        if (!this.address) {\n            throw new Error(\"Wallet not connected\");\n        }\n        return this.address;\n    }\n    getContractId() {\n        if (!this.contractId) {\n            throw new Error(\"Wallet not connected\");\n        }\n        return this.contractId;\n    }\n    async buildTransaction(params) {\n        // Mock transaction building\n        console.log(\"\\uD83D\\uDD28 Building mock transaction:\", params);\n        return {\n            id: `tx_${Math.random().toString(36).substring(2, 15)}`,\n            ...params\n        };\n    }\n    async signTransaction(tx) {\n        // Simulate passkey signing delay\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n        console.log(\"✍️ Mock passkey signature applied\");\n        return {\n            ...tx,\n            signature: `sig_${Math.random().toString(36).substring(2, 15)}`\n        };\n    }\n    async submitTransaction(signedTx) {\n        // Simulate blockchain submission delay\n        await new Promise((resolve)=>setTimeout(resolve, 2000));\n        console.log(\"\\uD83D\\uDCE4 Mock transaction submitted to blockchain\");\n        return {\n            hash: `hash_${Math.random().toString(36).substring(2, 15)}`,\n            status: \"success\",\n            ledger: Math.floor(Math.random() * 1000000) + 1000000\n        };\n    }\n    disconnect() {\n        console.log(\"\\uD83D\\uDD0C Mock passkey wallet disconnected\");\n        // Reset the wallet state\n        this.walletAddress = null;\n        this.contractId = null;\n    }\n    async executeTransaction(params) {\n        console.log(\"⚡ Mock transaction execution:\", params);\n        // Simulate transaction execution delay\n        await new Promise((resolve)=>setTimeout(resolve, 1500));\n        // Simulate passkey authentication\n        console.log(\"\\uD83D\\uDD10 Mock passkey authentication for transaction\");\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        console.log(\"✅ Mock transaction executed successfully\");\n        return {\n            hash: `tx_${Math.random().toString(36).substring(2, 15)}`,\n            status: \"success\",\n            ledger: Math.floor(Math.random() * 1000000) + 1000000\n        };\n    }\n    async getAccountInfo() {\n        console.log(\"\\uD83D\\uDCCA Mock account info requested\");\n        // Simulate API call delay\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n        return {\n            address: this.walletAddress,\n            contractId: this.contractId,\n            balance: {\n                USDC: \"1000000000\",\n                XLM: \"10000000000\" // 1000 XLM (7 decimals)\n            },\n            sequence: Math.floor(Math.random() * 1000000) + 1000000,\n            lastModified: Date.now()\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/mock-passkey-kit.ts\n");

/***/ })

};
;