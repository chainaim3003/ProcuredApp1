/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_node_modules_require-addon_lib_runtime_sync_recursive-_ssr_node_modules_sodium-native_sy-053cc3";
exports.ids = ["_ssr_node_modules_require-addon_lib_runtime_sync_recursive-_ssr_node_modules_sodium-native_sy-053cc3"];
exports.modules = {

/***/ "(ssr)/./node_modules/require-addon/lib/runtime sync recursive":
/*!******************************************************!*\
  !*** ./node_modules/require-addon/lib/runtime/ sync ***!
  \******************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(ssr)/./node_modules/require-addon/lib/runtime sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "(ssr)/./node_modules/sodium-native sync recursive":
/*!******************************************!*\
  !*** ./node_modules/sodium-native/ sync ***!
  \******************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(ssr)/./node_modules/sodium-native sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "(ssr)/./lib/x402-service.ts":
/*!*****************************!*\
  !*** ./lib/x402-service.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   X402Service: () => (/* binding */ X402Service),\n/* harmony export */   createX402Service: () => (/* binding */ createX402Service)\n/* harmony export */ });\n/* harmony import */ var _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stellar/stellar-sdk */ \"(ssr)/./node_modules/@stellar/stellar-sdk/lib/index.js\");\n/* harmony import */ var _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__);\n\nclass X402Service {\n    constructor(config){\n        this.config = config;\n        try {\n            this.server = new _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.Server(config.horizonUrl);\n        } catch (error) {\n            console.warn(\"Failed to initialize Stellar Server, using mock mode:\", error);\n            this.server = null;\n        }\n    }\n    /**\n   * Initiate X402 payment flow\n   */ async initiatePayment(params) {\n        try {\n            console.log(\"\\uD83D\\uDCB3 Initiating X402 payment:\", params);\n            // Step 1: Request payment requirements\n            const requirements = await this.getPaymentRequirements(params.resource);\n            if (!requirements) {\n                throw new Error(\"Payment requirements not available\");\n            }\n            // Step 2: Validate payment parameters\n            this.validatePaymentParams(params, requirements);\n            // Step 3: Create payment transaction\n            const paymentTx = await this.createPaymentTransaction(params, requirements);\n            // Step 4: Sign and submit transaction\n            const result = await this.submitPaymentTransaction(paymentTx, params.payer);\n            // Step 5: Create X-PAYMENT header\n            const paymentHeader = this.createPaymentHeader(result.txHash, requirements);\n            console.log(\"✅ X402 payment completed:\", result.txHash);\n            return {\n                success: true,\n                txHash: result.txHash,\n                paymentHeader\n            };\n        } catch (error) {\n            console.error(\"❌ X402 payment failed:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Payment failed\"\n            };\n        }\n    }\n    /**\n   * Get payment requirements from X402 facilitator\n   */ async getPaymentRequirements(resource) {\n        try {\n            console.log(`🔍 Requesting payment requirements for: ${resource}`);\n            const response = await fetch(`${this.config.facilitatorUrl}/payment-requirements`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    resource\n                })\n            });\n            if (!response.ok) {\n                if (response.status === 402) {\n                    // 402 Payment Required - extract requirements from headers\n                    const requirements = this.parsePaymentRequiredHeaders(response.headers);\n                    return requirements;\n                }\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const data = await response.json();\n            return data.requirements;\n        } catch (error) {\n            console.error(\"Failed to get payment requirements:\", error);\n            return null;\n        }\n    }\n    /**\n   * Verify X402 payment\n   */ async verifyPayment(paymentHeader, requirements) {\n        try {\n            console.log(\"\\uD83D\\uDD10 Verifying X402 payment\");\n            const response = await fetch(`${this.config.facilitatorUrl}/verify-payment`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"X-PAYMENT\": paymentHeader\n                },\n                body: JSON.stringify({\n                    requirements\n                })\n            });\n            return response.ok;\n        } catch (error) {\n            console.error(\"Payment verification failed:\", error);\n            return false;\n        }\n    }\n    /**\n   * Create USDC payment transaction\n   */ async createPaymentTransaction(params, requirements) {\n        if (!this.server) {\n            // Mock transaction for development\n            console.log(\"\\uD83D\\uDD27 Creating mock transaction (server not available)\");\n            return {};\n        }\n        const networkPassphrase = this.config.network === \"mainnet\" ? _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.Networks.PUBLIC : _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.Networks.TESTNET;\n        // Create USDC asset\n        const usdcAsset = new _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.Asset(\"USDC\", requirements.recipient);\n        // Build payment operation\n        const paymentOp = _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.Operation.payment({\n            destination: requirements.recipient,\n            asset: usdcAsset,\n            amount: (requirements.amount / 1000000).toString(),\n            source: params.payer?.getAddress()\n        });\n        // Create transaction\n        const transaction = new _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionBuilder(await this.getAccount(params.payer?.getAddress()), {\n            fee: _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.BASE_FEE,\n            networkPassphrase\n        }).addOperation(paymentOp).setTimeout(300).build();\n        return transaction;\n    }\n    /**\n   * Submit payment transaction\n   */ async submitPaymentTransaction(transaction, payer) {\n        if (!payer) {\n            throw new Error(\"Payer wallet required for transaction signing\");\n        }\n        if (!this.server) {\n            // Mock transaction submission for development\n            console.log(\"\\uD83D\\uDD27 Mock transaction submission (server not available)\");\n            await new Promise((resolve)=>setTimeout(resolve, 2000)) // Simulate network delay\n            ;\n            return {\n                txHash: `mock_tx_${Date.now()}`\n            };\n        }\n        // Sign transaction with payer's wallet\n        const signedTx = await payer.signTransaction(transaction);\n        // Submit to network\n        const result = await this.server.submitTransaction(signedTx);\n        if (result.successful) {\n            return {\n                txHash: result.hash\n            };\n        } else {\n            throw new Error(`Transaction failed: ${result.extras?.result_codes}`);\n        }\n    }\n    /**\n   * Create X-PAYMENT header\n   */ createPaymentHeader(txHash, requirements) {\n        const paymentData = {\n            txHash,\n            amount: requirements.amount,\n            token: requirements.token,\n            network: requirements.network,\n            timestamp: Date.now()\n        };\n        // In a real implementation, this would be signed\n        return Buffer.from(JSON.stringify(paymentData)).toString(\"base64\");\n    }\n    /**\n   * Parse 402 Payment Required headers\n   */ parsePaymentRequiredHeaders(headers) {\n        const scheme = headers.get(\"X-PAYMENT-SCHEME\") || \"exact\";\n        const network = headers.get(\"X-PAYMENT-NETWORK\") || \"stellar\";\n        const token = headers.get(\"X-PAYMENT-TOKEN\") || \"USDC\";\n        const amount = parseInt(headers.get(\"X-PAYMENT-AMOUNT\") || \"0\");\n        const recipient = headers.get(\"X-PAYMENT-RECIPIENT\") || \"\";\n        const validUntil = parseInt(headers.get(\"X-PAYMENT-VALID-UNTIL\") || \"0\");\n        return {\n            scheme,\n            network,\n            token,\n            amount,\n            recipient,\n            validUntil\n        };\n    }\n    /**\n   * Validate payment parameters against requirements\n   */ validatePaymentParams(params, requirements) {\n        if (params.amount !== requirements.amount) {\n            throw new Error(`Amount mismatch: expected ${requirements.amount}, got ${params.amount}`);\n        }\n        if (params.token !== requirements.token) {\n            throw new Error(`Token mismatch: expected ${requirements.token}, got ${params.token}`);\n        }\n        if (params.recipient !== requirements.recipient) {\n            throw new Error(`Recipient mismatch: expected ${requirements.recipient}, got ${params.recipient}`);\n        }\n        if (Date.now() > requirements.validUntil) {\n            throw new Error(\"Payment requirements expired\");\n        }\n    }\n    /**\n   * Get account information\n   */ async getAccount(address) {\n        if (!this.server) {\n            // Mock account for development\n            console.log(\"\\uD83D\\uDD27 Mock account loading (server not available)\");\n            return {\n                accountId: address,\n                sequence: \"1234567890\"\n            };\n        }\n        try {\n            return await this.server.loadAccount(address);\n        } catch (error) {\n            throw new Error(`Failed to load account ${address}: ${error}`);\n        }\n    }\n    /**\n   * Get USDC balance for an account\n   */ async getUSDCBalance(address) {\n        if (!this.server) {\n            // Mock balance for development\n            console.log(\"\\uD83D\\uDD27 Mock USDC balance (server not available)\");\n            return 1000000000 // 1000 USDC in micro units\n            ;\n        }\n        try {\n            const account = await this.server.loadAccount(address);\n            const usdcAsset = new _stellar_stellar_sdk__WEBPACK_IMPORTED_MODULE_0__.Asset(\"USDC\", this.config.usdcAssetId);\n            const balance = account.balances.find((b)=>b.asset_code === \"USDC\" && b.asset_issuer === this.config.usdcAssetId);\n            return balance ? parseFloat(balance.balance) * 1000000 : 0 // Convert to micro units\n            ;\n        } catch (error) {\n            console.error(\"Failed to get USDC balance:\", error);\n            return 0;\n        }\n    }\n    /**\n   * Check if account has sufficient USDC balance\n   */ async hasSufficientBalance(address, amount) {\n        const balance = await this.getUSDCBalance(address);\n        return balance >= amount;\n    }\n}\n// Helper function to create X402 service instance\nfunction createX402Service() {\n    const config = {\n        facilitatorUrl: \"http://localhost:8080\" || 0,\n        network: \"testnet\" || 0,\n        usdcAssetId: \"GBBD47IF6LXCC7EDU6X6LC4XES3D76GITB4Q5TNWFRJN54H6H6AUDH6A\" || 0,\n        horizonUrl: \"https://horizon-testnet.stellar.org\" || 0\n    };\n    return new X402Service(config);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/x402-service.ts\n");

/***/ })

};
;